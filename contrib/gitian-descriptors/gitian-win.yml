---
name: "Gulden-win-2.1.0"
enable_cache: true
distro: "ubuntu"
sudo: true
suites:
- "bionic"
architectures:
- "amd64"
packages:
- "wget"
- "curl"
- "g++"
- "git"
- "pkg-config"
- "autoconf"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "mingw-w64"
- "g++-mingw-w64"
- "nsis"
- "zip"
- "ca-certificates"
- "python3"
- "rename"
- "gperf"
- "ruby"
- "bison"
- "flex"
- "libssl-dev"
remotes:
- "url": https://github.com/Gulden/gulden-official.git
  "dir": "Gulden"
files:
- "osslsigncode-1.7.1.tar.gz" #Optional; Only needed for official builds.
- "0001-Make-code-work-with-OpenSSL-1.1.patch" #Optional - only needed for official builds - https://sourceforge.net/p/osslsigncode/patches/10/attachment/0001-Make-code-work-with-OpenSSL-1.1.patch
- "codesign.tar.gz" #Optional; only needed for official builds.
script: |
  WRAP_DIR=$HOME/wrapped
  HOSTS="i686-w64-mingw32 x86_64-w64-mingw32"
  CONFIGFLAGS="--enable-reduce-exports --disable-gui-tests"
  FAKETIME_HOST_PROGS="ar ranlib nm windres strip objcopy"
  FAKETIME_PROGS="date makensis zip"
  HOST_CFLAGS="-O3 -g"
  HOST_CXXFLAGS="-O3 -g"

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  function create_per-host_linker_wrapper {
  # This is only needed for trusty, as the mingw linker leaks a few bytes of
  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900
  for i in $HOSTS; do
    mkdir -p ${WRAP_DIR}/${i}
    for prog in collect2; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}/${prog}
        REAL=$(${i}-gcc -print-prog-name=${prog})
        echo "export MALLOC_PERTURB_=255" >> ${WRAP_DIR}/${i}/${prog}
        echo "${REAL} \$@" >> $WRAP_DIR/${i}/${prog}
        chmod +x ${WRAP_DIR}/${i}/${prog}
    done
    for prog in gcc g++; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "export COMPILER_PATH=${WRAP_DIR}/${i}" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  #Ensure we  have the right mingw selected (posix not win32 threads)
  for i in $HOSTS; do
    #todo - any others?
    list="gcc g++ ld ar as ranlib strip windres nm"
    for toolname in $list; do
        if [[ $(which ${i}-${toolname}-posix) ]]; then
            sudo update-alternatives --set ${i}-${toolname} $(which ${i}-${toolname}-posix)
        fi
    done
  done

  #Completely remove possibility of wrong mingw being used (win32 threads) by removing it from system immediately, leave only posix as a possibility.
  for i in $HOSTS; do
      sudo rm -rf /usr/lib/gcc/${i}/7.3-win32
  done

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_linker_wrapper "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  tar xf osslsigncode-1.7.1.tar.gz || true
  # Make the directory (for cases where the tar does not exist and fails)
  mkdir osslsigncode-1.7.1 || true
  cd osslsigncode-1.7.1
      patch < ../0001-Make-code-work-with-OpenSSL-1.1.patch
      ./configure --without-gsf --without-curl --disable-dependency-tracking || true
      make || true
  cd ..

  tar -xf codesign.tar.gz || true
  mkdir codesign || true

  cd Gulden
  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_linker_wrapper "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Create the release tarball using (arbitrarily) the first host
  ./autogen.sh
  CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/
  make dist
  SOURCEDIST=`echo Gulden-*.tar.gz`
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`

  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find Gulden-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  mkdir -p $OUTDIR/src
  cp ../$SOURCEDIST $OUTDIR/src
  popd

  # Workaround for tarball not building with the bare tag version (prep)
  make -C src obj/build.h

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    # Workaround for tarball not building with the bare tag version
    echo '#!/bin/true' >share/genbuild.sh
    mkdir src/obj
    cp ../src/obj/build.h src/obj/

    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}"

    # Place all the dependencies in release folder ready for installer
    mkdir release
    #cp -rf ${BASEPREFIX}/${i}/native/bin/*.dll release/ | true
    #cp -rf ${BASEPREFIX}/${i}/lib/*.dll release/ | true
    #cp -rf ${BASEPREFIX}/${i}/plugins/platforms release/ | true
    #cp -rf ${BASEPREFIX}/${i}/plugins/imageformats release/ | true
    #cp -rf /usr/${i}/lib/lib*thread*.dll release/ | true
    #cp -rf /usr/lib/gcc/${i}/7.3-posix/*.dll release/ | true

    # Build the binaries
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security

    # Move executables into release folder
    find . -name "*.exe" | xargs --max-procs 32 -i cp {} release/

    # TODO - change all the --max-procs to pull args from gitian input somehow; instead of hardcoded
    # Strip in place
    find release -name '*.exe' -o -name '*.dll' | xargs --max-procs 32 -i sh -c "${i}-objcopy --only-keep-debug {} {}.dbg ; ${i}-strip -s {} ; ${i}-objcopy --add-gnu-debuglink={}.dbg {}; (true)"

    # Sign executables
    if [ -f "${BUILD_DIR}/codesign/codesign.spc" ]; then
        find release -name "*.exe" | xargs --max-procs 32 -i sh -c "(${BUILD_DIR}/osslsigncode-1.7.1/osslsigncode -spc \"${BUILD_DIR}/codesign/codesign.spc\" -key \"${BUILD_DIR}/codesign/codesign.key\" -n \"Gulden\" -i \"https://www.Gulden.com\" -in \"{}\" -out \"{}s\") && (mv {}s {})"
    fi

    # Tarball of signed executables and debug info - direct to build host
    cd release
    find . -not -name '*.dbg' -type f  | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip
    find . -name '*.dbg' -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip
    find . -name '*.dbg' -type f | xargs rm -rf
    cd ..

    # Generate NSIS installer
    make deploy
    rename 's/-setup\.exe$/-setup-unsigned.exe/' *-setup.exe
    
    # Sign installer
    if [ -f "${BUILD_DIR}/codesign/codesign.spc" ]; then
        find . -name "*setup*.exe" | xargs --max-procs 32 -i sh -c "(${BUILD_DIR}/osslsigncode-1.7.1/osslsigncode -spc \"${BUILD_DIR}/codesign/codesign.spc\" -key \"${BUILD_DIR}/codesign/codesign.key\" -n \"Gulden\" -i \"https://www.Gulden.com\" -in \"{}\" -out \"{}s\") && (mv {}s {})"
        rename 's/-setup-unsigned\.exe$/-setup.exe/' *-setup-unsigned.exe
    fi

    #Copy installer to build host
    cp -f Gulden-*setup*.exe $OUTDIR/
  done
