---
name: "Novo-win-1.0.10"
enable_cache: true
distro: "ubuntu"
sudo: true
suites:
- "bionic"
architectures:
- "amd64"
packages:
- "wget"
- "curl"
- "g++"
- "git"
- "pkg-config"
- "autoconf"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "mingw-w64"
- "g++-mingw-w64"
- "nsis"
- "zip"
- "ca-certificates"
- "python3"
- "rename"
- "gperf"
- "ruby"
- "bison"
- "flex"
- "libssl-dev"
remotes:
- "url": https://github.com/novocurrency/novocurrency-core.git
  "dir": "Novo"
files:
- "osslsigncode-2.0.tar.gz" #Optional; Only needed for official builds.
- "codesign.tar.gz" #Optional; only needed for official builds.
- "iojs-v8.2.3.tar.gz"
- "node-addon-api-2.0.0.tgz"
script: |
  WRAP_DIR=$HOME/wrapped
  HOSTS="x86_64-w64-mingw32"
  CONFIGFLAGS="--enable-reduce-exports --disable-gui-tests --disable-bench --disable-tests --disable-man --enable-zmq --with-utils --with-daemon --with-node-js-libs --with-qrencode --with-gui=no"
  FAKETIME_HOST_PROGS="ar ranlib nm windres strip objcopy"
  FAKETIME_PROGS="date makensis zip"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export GZIP="-9n"
  export TAR_OPTIONS="--mtime="$REFERENCE_DATE\\\ $REFERENCE_TIME""
  export TZ="UTC"
  export BUILD_DIR=`pwd`
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    sudo cp /usr/${i}/bin/dlltool /bin/${i}-dlltool
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  function create_per-host_linker_wrapper {
  # This is only needed for trusty, as the mingw linker leaks a few bytes of
  # heap, causing non-determinism. See discussion in https://github.com/bitcoin/bitcoin/pull/6900
  for i in $HOSTS; do
    mkdir -p ${WRAP_DIR}/${i}
    for prog in collect2; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}/${prog}
        REAL=$(${i}-gcc -print-prog-name=${prog})
        echo "export MALLOC_PERTURB_=255" >> ${WRAP_DIR}/${i}/${prog}
        echo "${REAL} \$@" >> $WRAP_DIR/${i}/${prog}
        chmod +x ${WRAP_DIR}/${i}/${prog}
    done
    for prog in gcc g++; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "export COMPILER_PATH=${WRAP_DIR}/${i}" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  #Ensure we  have the right mingw selected (posix not win32 threads)
  for i in $HOSTS; do
    #todo - any others?
    list="gcc g++ ld ar as ranlib strip windres nm"
    for toolname in $list; do
        if [[ $(which ${i}-${toolname}-posix) ]]; then
            sudo update-alternatives --set ${i}-${toolname} $(which ${i}-${toolname}-posix)
        fi
    done
  done

  #Completely remove possibility of wrong mingw being used (win32 threads) by removing it from system immediately, leave only posix as a possibility.
  for i in $HOSTS; do
      sudo rm -rf /usr/lib/gcc/${i}/7.3-win32
  done

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_linker_wrapper "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  tar xf osslsigncode-2.0.tar.gz || true
  # Make the directory (for cases where the tar does not exist and fails)
  mkdir osslsigncode-2.0 || true
  cd osslsigncode-2.0
      ./autogen.sh || true
      ./configure --without-gsf --without-curl --disable-dependency-tracking || true
      make ${MAKEOPTS} || true
  cd ..

  tar -xf codesign.tar.gz || true
  mkdir codesign || true

  export CXXFLAGS="-fPIC -fdata-sections -ffunction-sections -fomit-frame-pointer"
  export CFLAGS=${CXXFLAGS}
  export LDFLAGS="-fPIC -Bsymbolic -L`pwd`/Novo/build_node -lnode -Wl,--gc-sections"
  export EXTRA_CXX_FLAGS="-DNODE_HOST_BINARY=node.exe -DUSING_UV_SHARED=1 -DUSING_V8_SHARED=1 -DV8_DEPRECATION_WARNINGS=1 -DV8_DEPRECATION_WARNINGS -DV8_IMMINENT_DEPRECATION_WARNINGS -DWIN32 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE -D_HAS_EXCEPTIONS=0 -DBUILDING_NODE_EXTENSION -D_WINDLL -DNAPI_VERSION=5 -DDJINNI_NODEJS"

  cd Novo

  mkdir build_node

  BASEPREFIX=`pwd`/depends
  # Build dependencies for each host
  for i in $HOSTS; do
    cd build_node
    ${i}-dlltool -d ${BASEPREFIX}/../developer-tools/node/node.def -y libnode.a
    cd ..
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}" GITIAN_BUILD="1"
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}" GITIAN_BUILD="1" NO_UPNP=1 EXTRA_PACKAGES='qrencode'
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_linker_wrapper "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Create the release tarball using (arbitrarily) the first host
  ./autogen.sh
  CONFIG_SITE=${BASEPREFIX}/`echo "${HOSTS}" | awk '{print $1;}'`/share/config.site ./configure --prefix=/
  make dist
  SOURCEDIST=`echo Novo-*.tar.gz`
  DISTNAME=`echo ${SOURCEDIST} | sed 's/.tar.*//'`

  # Correct tar file order
  mkdir -p temp
  pushd temp
  tar xf ../$SOURCEDIST
  find Novo-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST
  mkdir -p $OUTDIR/src
  cp ../$SOURCEDIST $OUTDIR/src
  popd

  # Workaround for tarball not building with the bare tag version (prep)
  make -C src obj/build.h

  ORIGPATH="$PATH"
  # Extract the release tarball into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH=`pwd`/installed/${DISTNAME}
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf ../$SOURCEDIST

    mkdir build_node | true
    cd build_node

    mkdir electron-8.2.3
    tar -xvf ../../../iojs-v8.2.3.tar.gz -C electron-8.2.3
    mkdir node-addon-api-2.0.0
    tar -xvf ../../../node-addon-api-2.0.0.tgz -C node-addon-api-2.0.0

    EXTRA_FLAGS="-I`pwd`/electron-8.2.3/node_headers/include/node/ -I`pwd`/node-addon-api-2.0.0/package/ ${EXTRA_CXX_FLAGS}"
    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ../configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS} ${EXTRA_FLAGS}" CXXFLAGS="${HOST_CXXFLAGS} ${EXTRA_FLAGS}"

    # Workaround for tarball not building with the bare tag version
    echo '#!/bin/true' >share/genbuild.sh
    mkdir src/obj
    cp ../../src/obj/build.h src/obj/


    # Place all the dependencies in release folder ready for installer
    mkdir release

    # Build the binaries
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security

    # Move library into release folder
    cp -f src/.libs/lib_unity_node_js-0.dll release/

    # Move executables into release folder
    find . -name "*.exe" | xargs --max-procs 32 -i cp {} release/

    # Rename libraries to final names before splitting the debug info, otherwise gdb doesn't auto load the info properly
    mv -f release/lib_unity_node_js-0.dll release/libnovo_win_${i}.node

    # TODO - change all the --max-procs to pull args from gitian input somehow; instead of hardcoded
    # Strip in place
    find release -name '*.exe' -o -name '*.node' | xargs --max-procs 32 -i sh -c "${i}-objcopy --only-keep-debug {} {}.dbg ; ${i}-strip -s {} ; ${i}-objcopy --add-gnu-debuglink={}.dbg {}; (true)"

    # Sign executables
    if [ -f "${BUILD_DIR}/codesign/codesign.spc" ]; then
        find release -name "*.exe" | xargs --max-procs 32 -i sh -c "(${BUILD_DIR}/osslsigncode-2.0/osslsigncode -spc \"${BUILD_DIR}/codesign/codesign.spc\" -key \"${BUILD_DIR}/codesign/codesign.key\" -n \"Gulden\" -i \"https://www.Gulden.com\" -in \"{}\" -out \"{}s\") && (mv {}s {})"
    fi

    #Move lib results to outdir
    mkdir $OUTDIR/libs || true
    mv -f release/libnovo_win_${i}.node $OUTDIR/libs/libnovo_win_${i}.node
    mv -f release/libnovo_win_${i}.node.dbg $OUTDIR/libs/libnovo_win_${i}.node.dbg

    # Tarball of signed executables and debug info - direct to build host
    cd release
    find . -not -name '*.dbg' -type f  | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip
    find . -name '*.dbg' -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip
    find . -name '*.dbg' -type f | xargs rm -rf
    cd ..

  done
