# Copyright (c) 2018-2020 The Gulden developers
# Authored by: Malcolm MacLeod (mmacleod@gmx.com)
# Distributed under the GULDEN software license, see the accompanying
# file COPYING

qr_code_record = record {
    width: i32;
    pixel_data: binary;
}

balance_record = record {
    availableIncludingLocked: i64;
    availableExcludingLocked: i64;
    availableLocked: i64;
    unconfirmedIncludingLocked: i64;
    unconfirmedExcludingLocked: i64;
    unconfirmedLocked: i64;
    immatureIncludingLocked: i64;
    immatureExcludingLocked: i64;
    immatureLocked: i64;
    totalLocked: i64;
}

uri_record = record {
    scheme : string;
    path : string;
    items: map<string, string>;
}

uri_recipient = record {
    valid : bool;
    address : string;
    label : string;
    desc : string;
    amount : i64;
} deriving(parcelable)

mutation_record = record {
    change : i64;
    timestamp : i64;
    txHash : string;
    status : transaction_status;
    depth : i32;
}

transaction_record = record {
    txHash: string;
    timeStamp : i64;
    amount : i64;
    fee : i64;
    status : transaction_status;
    height : i32;
    blockTime : i64;
    depth : i32;
    inputs : list<input_record>;
    outputs : list<output_record>;
} deriving(parcelable)

transaction_status = enum {
    unconfirmed;
    confirming;
    confirmed;
    abandoned;
    conflicted;
}

input_record = record {
    address : string;
    label : string;
    desc : string;
    isMine : bool;
} deriving(parcelable)

output_record = record {
    amount : i64;
    address : string;
    label : string;
    desc : string;
    isMine : bool;
} deriving(parcelable)

address_record = record {
    address : string;
    name : string;
    desc : string;
    purpose : string;
} deriving(parcelable)

peer_record = record {
    id : i64;
    ip : string;
    hostname : string;
    start_height : i32;
    synced_height : i32;
    common_height : i32;
    latency : i32;
    userAgent : string;
    protocol : i64;
}

block_info_record = record {
    height : i32;
    timeStamp : i64;
    blockHash : string;
}

legacy_wallet_result = enum {
    unsupported_on_this_platform;
    invalid_or_corrupt;
    encrypted_password_required;
    password_invalid;
    valid;
}

payment_result_status = enum {
    success;
    insufficient_funds;
}

# This interface will be implemented in C++ and can be called from any language.
unified_backend = interface +c {

    # Get the build information (ie. commit id and status)
    static BuildInfo(): string;

    # Start the library
    # extraArgs - any additional commandline arguments as could normally be passed to the daemon binary
    # NB!!! This call blocks until the library is terminated, it is the callers responsibility to place it inside a thread or similar.
    # If you are in an environment where this is not possible (node.js for example use InitUnityLibThreaded instead which places it in a thread on your behalf)
    static InitUnityLib(data_dir : string, staticFilterPath : string, staticFilterOffset : i64, staticFilterLength : i64,testnet : bool,spvMode : bool, signalHandler : unified_frontend, extraArgs : string): i32;
    # Threaded implementation of InitUnityLib
    static InitUnityLibThreaded(data_dir : string, staticFilterPath : string, staticFilterOffset : i64, staticFilterLength : i64,testnet : bool,spvMode : bool, signalHandler : unified_frontend, extraArgs : string);

    # Create the wallet - this should only be called after receiving a `notifyInit...` signal from InitUnityLib
    static InitWalletFromRecoveryPhrase(phrase : string, password : string): bool;

    # Continue creating wallet that was previously erased using EraseWalletSeedsAndAccounts
    static ContinueWalletFromRecoveryPhrase(phrase : string, password : string): bool;

    # Create the wallet - this should only be called after receiving a `notifyInit...` signal from InitUnityLib
    static InitWalletLinkedFromURI(linked_uri : string, password : string): bool;

    # Continue creating wallet that was previously erased using EraseWalletSeedsAndAccounts
    static ContinueWalletLinkedFromURI(linked_uri : string, password : string): bool;

    # Create the wallet - this should only be called after receiving a `notifyInit...` signal from InitUnityLib
    static InitWalletFromAndroidLegacyProtoWallet(wallet_file : string, old_password : string, new_password : string): bool;

    # Check if a file is a valid legacy proto wallet
    static isValidAndroidLegacyProtoWallet(wallet_file : string, old_password : string): legacy_wallet_result;

    # Check link URI for validity
    static IsValidLinkURI(phrase: string): bool;

    # Replace the existing wallet accounts with a new one from a linked URI - only after first emptying the wallet.
    static ReplaceWalletLinkedFromURI(linked_uri : string, password : string): bool;

    # Erase the seeds and accounts of a wallet leaving an empty wallet (with things like the address book intact)
    # After calling this it will be necessary to create a new linked account or recovery phrase account again.
    # NB! This will empty a wallet regardless of whether it has funds in it or not and makes no provisions to check for this - it is the callers responsibility to ensure that erasing the wallet is safe to do in this regard.
    static EraseWalletSeedsAndAccounts(): bool;

    # Check recovery phrase for (syntactic) validity
    # Considered valid if the contained mnemonic is valid and the birth-number is either absent or passes Base-10 checksum
    static IsValidRecoveryPhrase(phrase: string): bool;

    # Generate a new recovery mnemonic
    static GenerateRecoveryMnemonic(): string;
    
    static GenerateGenesisKeys(): string;

    # Compute recovery phrase with birth number
    static ComposeRecoveryPhrase(mnemonic: string, birthTime: i64): string;

    # Stop the library
    static TerminateUnityLib();

    # Generate a QR code for a string, QR code will be as close to width_hint as possible when applying simple scaling.
    static QRImageFromString(qr_string : string, width_hint : i32): qr_code_record;

    # Get a receive address from the wallet
    static GetReceiveAddress(): string;

    # Get the recovery phrase for the wallet
    static GetRecoveryPhrase(): string;

    # Check if the wallet is using a mnemonic seed ie. recovery phrase (else it is a linked wallet)
    static IsMnemonicWallet(): bool;

    # Check if the phrase mnemonic is a correct one for the wallet (phrase can be with or without birth time)
    static IsMnemonicCorrect(phrase: string): bool;
    
    # Get the 'dictionary' of valid words that a recovery phrase can be composed of
    # NB! Not all combinations of these words are valid
    # Do not use this to generate/compose your own phrases - always use 'GenerateRecoveryMnemonic' for this
    # This function should only be used for input validation/auto-completion
    static GetMnemonicDictionary(): list<string>;

    # Unlock wallet
    static UnlockWallet(password: string): bool;

    # Forcefully lock wallet again
    static LockWallet(): bool;

    # Change the wallet password
    static ChangePassword(oldPassword: string, newPassword: string) : bool;

    # Check if the wallet has any transactions that are still pending confirmation, to be used to determine if e.g. it is safe to perform a link or whether we should wait.
    static HaveUnconfirmedFunds(): bool;

    # Check current wallet balance (including unconfirmed funds)
    static GetBalance(): i64;

    # Rescan blockchain for wallet transactions
    static DoRescan();

    # Check if text/address is something we are capable of sending money too
    static IsValidRecipient(request : uri_record): uri_recipient;

    # Compute the fee required to send amount to given recipient
    static feeForRecipient(request : uri_recipient) : i64;

    # Attempt to pay a recipient, will throw on failure with description
    static performPaymentToRecipient(request : uri_recipient, substract_fee: bool ) : payment_result_status;

    # Get list of all transactions wallet has been involved in
    static getTransactionHistory() : list<transaction_record>;

    # Get the wallet transaction for the hash
    # Will throw if not found
    static getTransaction(txHash : string) :  transaction_record;

    # Get list of wallet mutations
    static getMutationHistory() : list<mutation_record>;

    # Get list of all address book entries
    static getAddressBookRecords() : list<address_record>;

    # Add a record to the address book
    static addAddressBookRecord(address : address_record);

    # Delete a record from the address book
    static deleteAddressBookRecord(address : address_record);

    # Interim persist and prune of state. Use at key moments like app backgrounding.
    static PersistAndPruneForSPV();

    # Reset progress notification. In cases where there has been no progress for a long time, but the process
    # is still running the progress can be reset and will represent work to be done from this reset onwards.
    # For example when the process is in the background on iOS for a long long time (but has not been terminated
    # by the OS) this might make more sense then to continue the progress from where it was a day or more ago.
    static ResetUnifiedProgress();

    # Get connected peer info
    static getPeers() : list<peer_record>;

    # Get info of last blocks (at most 32) in SPV chain
    static getLastSPVBlockInfos() : list<block_info_record>;

    static getUnifiedProgress(): f32;

    static getMonitoringStats(): monitor_record;

    static RegisterMonitorListener(listener : monitor_listener);
    static UnregisterMonitorListener(listener : monitor_listener);

    # Interface constants
    const version: i32 = 1;
}

# Interface to receive events from the core
unified_frontend = interface +j +o +n {
    # Fraction of work done since session start or last progress reset [0..1]
    # Unified progress combines connection state, header and block sync
    notifyUnifiedProgress(progress : f32): &;
    notifyBalanceChange(new_balance : balance_record): &;
    # Notification of new mutations.
    # If self_committed it is due to a call to performPaymentToRecipient, else it is because of a transaction
    # reached us in another way. In general this will be because we received funds from someone, hower there are
    # also cases where funds is send from our wallet while !self_committed (for example by a linked desktop wallet
    # or another wallet instance using the same keys as ours).
    notifyNewMutation(mutation : mutation_record, self_committed: bool): &;
    notifyUpdatedTransaction(transaction : transaction_record): &;
    notifyInitWithExistingWallet(): &;
    notifyInitWithoutExistingWallet(): &;
    notifyShutdown(): &;
    notifyCoreReady(): &;

    logPrint(str : string): &;
}

# monitoring stats
monitor_record = record {
    partialHeight: i32;
    partialOffset: i32;
    prunedHeight: i32;
    processedSPVHeight: i32;
    probableHeight: i32;
}

# Monitoring events
monitor_listener = interface +j +o +n {
    onPartialChain(height : i32, probable_height : i32, offset : i32);
    onPruned(height : i32);
    onProcessedSPVBlocks(height : i32);
}
