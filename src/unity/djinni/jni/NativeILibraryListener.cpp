// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NativeILibraryListener.hpp"  // my header
#include "Marshal.hpp"
#include "NativeBalanceRecord.hpp"
#include "NativeMutationRecord.hpp"
#include "NativeTransactionRecord.hpp"

namespace djinni_generated {

NativeILibraryListener::NativeILibraryListener() : ::djinni::JniInterface<::ILibraryListener, NativeILibraryListener>() {}

NativeILibraryListener::~NativeILibraryListener() = default;

NativeILibraryListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeILibraryListener::JavaProxy::~JavaProxy() = default;

void NativeILibraryListener::JavaProxy::notifyUnifiedProgress(float c_progress) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyUnifiedProgress,
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_progress)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifySyncDone() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifySyncDone);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyBalanceChange(const ::BalanceRecord & c_new_balance) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyBalanceChange,
                           ::djinni::get(::djinni_generated::NativeBalanceRecord::fromCpp(jniEnv, c_new_balance)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyNewMutation(const ::MutationRecord & c_mutation, bool c_self_committed) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyNewMutation,
                           ::djinni::get(::djinni_generated::NativeMutationRecord::fromCpp(jniEnv, c_mutation)),
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_self_committed)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyUpdatedTransaction(const ::TransactionRecord & c_transaction) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyUpdatedTransaction,
                           ::djinni::get(::djinni_generated::NativeTransactionRecord::fromCpp(jniEnv, c_transaction)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyInitWithExistingWallet() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyInitWithExistingWallet);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyInitWithoutExistingWallet() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyInitWithoutExistingWallet);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyShutdown() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyShutdown);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::notifyCoreReady() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_notifyCoreReady);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeILibraryListener::JavaProxy::logPrint(const std::string & c_str) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeILibraryListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_logPrint,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_str)));
    ::djinni::jniExceptionCheck(jniEnv);
}

}  // namespace djinni_generated
