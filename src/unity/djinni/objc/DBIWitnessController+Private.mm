// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#import "DBIWitnessController+Private.h"
#import "DBIWitnessController.h"
#import "DBWitnessAccountStatisticsRecord+Private.h"
#import "DBWitnessEstimateInfoRecord+Private.h"
#import "DBWitnessFundingResultRecord+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBIWitnessController ()

- (id)initWithCpp:(const std::shared_ptr<::IWitnessController>&)cppRef;

@end

@implementation DBIWitnessController {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::IWitnessController>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::IWitnessController>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nonnull NSDictionary<NSString *, NSString *> *)getNetworkLimits {
    try {
        auto objcpp_result_ = ::IWitnessController::getNetworkLimits();
        return ::djinni::Map<::djinni::String, ::djinni::String>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull DBWitnessEstimateInfoRecord *)getEstimatedWeight:(int64_t)amountToLock
                                         lockPeriodInBlocks:(int64_t)lockPeriodInBlocks {
    try {
        auto objcpp_result_ = ::IWitnessController::getEstimatedWeight(::djinni::I64::toCpp(amountToLock),
                                                                       ::djinni::I64::toCpp(lockPeriodInBlocks));
        return ::djinni_generated::WitnessEstimateInfoRecord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull DBWitnessFundingResultRecord *)fundWitnessAccount:(nonnull NSString *)fundingAccountUUID
                                          witnessAccountUUID:(nonnull NSString *)witnessAccountUUID
                                               fundingAmount:(int64_t)fundingAmount
                                 requestedLockPeriodInBlocks:(int64_t)requestedLockPeriodInBlocks {
    try {
        auto objcpp_result_ = ::IWitnessController::fundWitnessAccount(::djinni::String::toCpp(fundingAccountUUID),
                                                                       ::djinni::String::toCpp(witnessAccountUUID),
                                                                       ::djinni::I64::toCpp(fundingAmount),
                                                                       ::djinni::I64::toCpp(requestedLockPeriodInBlocks));
        return ::djinni_generated::WitnessFundingResultRecord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull DBWitnessAccountStatisticsRecord *)getAccountWitnessStatistics:(nonnull NSString *)witnessAccountUUID {
    try {
        auto objcpp_result_ = ::IWitnessController::getAccountWitnessStatistics(::djinni::String::toCpp(witnessAccountUUID));
        return ::djinni_generated::WitnessAccountStatisticsRecord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setAccountCompounding:(nonnull NSString *)witnessAccountUUID
               shouldCompound:(BOOL)shouldCompound {
    try {
        ::IWitnessController::setAccountCompounding(::djinni::String::toCpp(witnessAccountUUID),
                                                    ::djinni::Bool::toCpp(shouldCompound));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isAccountCompounding:(nonnull NSString *)witnessAccountUUID {
    try {
        auto objcpp_result_ = ::IWitnessController::isAccountCompounding(::djinni::String::toCpp(witnessAccountUUID));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto IWitnessController::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto IWitnessController::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DBIWitnessController>(cpp);
}

}  // namespace djinni_generated

@end
