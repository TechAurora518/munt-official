// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#import "DBBalanceRecord.h"


@implementation DBBalanceRecord

- (nonnull instancetype)initWithAvailableIncludingLocked:(int64_t)availableIncludingLocked
                                availableExcludingLocked:(int64_t)availableExcludingLocked
                                         availableLocked:(int64_t)availableLocked
                              unconfirmedIncludingLocked:(int64_t)unconfirmedIncludingLocked
                              unconfirmedExcludingLocked:(int64_t)unconfirmedExcludingLocked
                                       unconfirmedLocked:(int64_t)unconfirmedLocked
                                 immatureIncludingLocked:(int64_t)immatureIncludingLocked
                                 immatureExcludingLocked:(int64_t)immatureExcludingLocked
                                          immatureLocked:(int64_t)immatureLocked
                                             totalLocked:(int64_t)totalLocked
{
    if (self = [super init]) {
        _availableIncludingLocked = availableIncludingLocked;
        _availableExcludingLocked = availableExcludingLocked;
        _availableLocked = availableLocked;
        _unconfirmedIncludingLocked = unconfirmedIncludingLocked;
        _unconfirmedExcludingLocked = unconfirmedExcludingLocked;
        _unconfirmedLocked = unconfirmedLocked;
        _immatureIncludingLocked = immatureIncludingLocked;
        _immatureExcludingLocked = immatureExcludingLocked;
        _immatureLocked = immatureLocked;
        _totalLocked = totalLocked;
    }
    return self;
}

+ (nonnull instancetype)balanceRecordWithAvailableIncludingLocked:(int64_t)availableIncludingLocked
                                         availableExcludingLocked:(int64_t)availableExcludingLocked
                                                  availableLocked:(int64_t)availableLocked
                                       unconfirmedIncludingLocked:(int64_t)unconfirmedIncludingLocked
                                       unconfirmedExcludingLocked:(int64_t)unconfirmedExcludingLocked
                                                unconfirmedLocked:(int64_t)unconfirmedLocked
                                          immatureIncludingLocked:(int64_t)immatureIncludingLocked
                                          immatureExcludingLocked:(int64_t)immatureExcludingLocked
                                                   immatureLocked:(int64_t)immatureLocked
                                                      totalLocked:(int64_t)totalLocked
{
    return [[self alloc] initWithAvailableIncludingLocked:availableIncludingLocked
                                 availableExcludingLocked:availableExcludingLocked
                                          availableLocked:availableLocked
                               unconfirmedIncludingLocked:unconfirmedIncludingLocked
                               unconfirmedExcludingLocked:unconfirmedExcludingLocked
                                        unconfirmedLocked:unconfirmedLocked
                                  immatureIncludingLocked:immatureIncludingLocked
                                  immatureExcludingLocked:immatureExcludingLocked
                                           immatureLocked:immatureLocked
                                              totalLocked:totalLocked];
}

- (NSString *)description
{
    return [NSString stringWithFormat:@"<%@ %p availableIncludingLocked:%@ availableExcludingLocked:%@ availableLocked:%@ unconfirmedIncludingLocked:%@ unconfirmedExcludingLocked:%@ unconfirmedLocked:%@ immatureIncludingLocked:%@ immatureExcludingLocked:%@ immatureLocked:%@ totalLocked:%@>", self.class, (void *)self, @(self.availableIncludingLocked), @(self.availableExcludingLocked), @(self.availableLocked), @(self.unconfirmedIncludingLocked), @(self.unconfirmedExcludingLocked), @(self.unconfirmedLocked), @(self.immatureIncludingLocked), @(self.immatureExcludingLocked), @(self.immatureLocked), @(self.totalLocked)];
}

@end
