// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#import "DBIP2pNetworkController+Private.h"
#import "DBIP2pNetworkController.h"
#import "DBIP2pNetworkListener+Private.h"
#import "DBPeerRecord+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DBIP2pNetworkController ()

- (id)initWithCpp:(const std::shared_ptr<::IP2pNetworkController>&)cppRef;

@end

@implementation DBIP2pNetworkController {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::IP2pNetworkController>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::IP2pNetworkController>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)setListener:(nullable id<DBIP2pNetworkListener>)networklistener {
    try {
        ::IP2pNetworkController::setListener(::djinni_generated::IP2pNetworkListener::toCpp(networklistener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)disableNetwork {
    try {
        ::IP2pNetworkController::disableNetwork();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)enableNetwork {
    try {
        ::IP2pNetworkController::enableNetwork();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NSArray<DBPeerRecord *> *)getPeerInfo {
    try {
        auto objcpp_result_ = ::IP2pNetworkController::getPeerInfo();
        return ::djinni::List<::djinni_generated::PeerRecord>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto IP2pNetworkController::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto IP2pNetworkController::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DBIP2pNetworkController>(cpp);
}

}  // namespace djinni_generated

@end
