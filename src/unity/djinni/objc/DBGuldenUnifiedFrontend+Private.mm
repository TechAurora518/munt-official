// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#import "DBGuldenUnifiedFrontend+Private.h"
#import "DBGuldenUnifiedFrontend.h"
#import "DBBalanceRecord+Private.h"
#import "DBMutationRecord+Private.h"
#import "DBTransactionRecord+Private.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class GuldenUnifiedFrontend::ObjcProxy final
: public ::GuldenUnifiedFrontend
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::GuldenUnifiedFrontend;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void notifyUnifiedProgress(float c_progress) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyUnifiedProgress:(::djinni::F32::fromCpp(c_progress))];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyBalanceChange(const ::BalanceRecord & c_new_balance) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyBalanceChange:(::djinni_generated::BalanceRecord::fromCpp(c_new_balance))];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyNewMutation(const ::MutationRecord & c_mutation, bool c_self_committed) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyNewMutation:(::djinni_generated::MutationRecord::fromCpp(c_mutation))
                                                                                selfCommitted:(::djinni::Bool::fromCpp(c_self_committed))];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyUpdatedTransaction(const ::TransactionRecord & c_transaction) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyUpdatedTransaction:(::djinni_generated::TransactionRecord::fromCpp(c_transaction))];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyInitWithExistingWallet() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyInitWithExistingWallet];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyInitWithoutExistingWallet() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyInitWithoutExistingWallet];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyShutdown() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyShutdown];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void notifyCoreReady() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() notifyCoreReady];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
    void logPrint(const std::string & c_str) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() logPrint:(::djinni::String::fromCpp(c_str))];
            return ::djinni::void::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto GuldenUnifiedFrontend::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto GuldenUnifiedFrontend::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
