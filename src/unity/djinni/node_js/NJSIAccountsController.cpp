// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSIAccountsController.hpp"
using namespace std;

void NJSIAccountsController::setListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIAccountsController::setListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<NJSIAccountsListener> arg_0(std::shared_ptr<NJSIAccountsListener>{}, NJSIAccountsListener::Unwrap(info[0].As<Napi::Object>()));

    IAccountsController::setListener(arg_0);
}
Napi::Value NJSIAccountsController::setActiveAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIAccountsController::setActiveAccount needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = IAccountsController::setActiveAccount(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSIAccountsController::deleteAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIAccountsController::deleteAccount needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = IAccountsController::deleteAccount(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSIAccountsController::createAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSIAccountsController::createAccount needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = IAccountsController::createAccount(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::String::New(env, result);

    return arg_2;
}
Napi::Value NJSIAccountsController::purgeAccount(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIAccountsController::purgeAccount needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = IAccountsController::purgeAccount(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}

Napi::FunctionReference NJSIAccountsController::constructor;

Napi::Object NJSIAccountsController::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSIAccountsController", {
    InstanceMethod("setListener", &NJSIAccountsController::setListener),
    InstanceMethod("setActiveAccount", &NJSIAccountsController::setActiveAccount),
    InstanceMethod("deleteAccount", &NJSIAccountsController::deleteAccount),
    InstanceMethod("createAccount", &NJSIAccountsController::createAccount),
    InstanceMethod("purgeAccount", &NJSIAccountsController::purgeAccount),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSIAccountsController", func);
    return exports;
}
