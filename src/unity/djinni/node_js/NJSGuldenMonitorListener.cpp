// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSGuldenMonitorListener.hpp"
#include "NJSObjectWrapper.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSGuldenMonitorListener::onPartialChain(int32_t height, int32_t probable_height, int32_t offset)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(height);
    auto arg_1 = Nan::New<Int32>(probable_height);
    auto arg_2 = Nan::New<Int32>(offset);
    Handle<Value> args[3] = {arg_0,arg_1,arg_2};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onPartialChain fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("onPartialChain").ToLocalChecked()).ToLocalChecked();
    auto result_onPartialChain = Nan::CallAsFunction(calling_funtion->ToObject(),local_njs_impl,3,args);
    if(result_onPartialChain.IsEmpty())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onPartialChain call failed");
    }
}

void NJSGuldenMonitorListener::onPruned(int32_t height)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(height);
    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onPruned fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("onPruned").ToLocalChecked()).ToLocalChecked();
    auto result_onPruned = Nan::CallAsFunction(calling_funtion->ToObject(),local_njs_impl,1,args);
    if(result_onPruned.IsEmpty())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onPruned call failed");
    }
}

void NJSGuldenMonitorListener::onProcessedSPVBlocks(int32_t height)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Int32>(height);
    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onProcessedSPVBlocks fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("onProcessedSPVBlocks").ToLocalChecked()).ToLocalChecked();
    auto result_onProcessedSPVBlocks = Nan::CallAsFunction(calling_funtion->ToObject(),local_njs_impl,1,args);
    if(result_onProcessedSPVBlocks.IsEmpty())
    {
        Nan::ThrowError("NJSGuldenMonitorListener::onProcessedSPVBlocks call failed");
    }
}

NAN_METHOD(NJSGuldenMonitorListener::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSGuldenMonitorListener function can only be called as constructor (use New)");
    }
    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSGuldenMonitorListener::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSGuldenMonitorListener>(info[0]->ToObject());
    djinni::js::ObjectWrapper<NJSGuldenMonitorListener>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSGuldenMonitorListener::GuldenMonitorListener_prototype;

Local<Object> NJSGuldenMonitorListener::wrap(const std::shared_ptr<::GuldenMonitorListener> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(GuldenMonitorListener_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        djinni::js::ObjectWrapper<::GuldenMonitorListener>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSGuldenMonitorListener::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSGuldenMonitorListener::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSGuldenMonitorListener::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSGuldenMonitorListener").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    GuldenMonitorListener_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSGuldenMonitorListener").ToLocalChecked(), func_template->GetFunction());
}
