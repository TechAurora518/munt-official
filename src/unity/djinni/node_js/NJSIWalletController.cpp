// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSIWalletController.hpp"
using namespace std;

void NJSIWalletController::setListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIWalletController::setListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<NJSIWalletListener> arg_0(std::shared_ptr<NJSIWalletListener>{}, NJSIWalletListener::Unwrap(info[0].As<Napi::Object>()));

    IWalletController::setListener(arg_0);
}
Napi::Value NJSIWalletController::HaveUnconfirmedFunds(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIWalletController::HaveUnconfirmedFunds needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = IWalletController::HaveUnconfirmedFunds();

    //Wrap result in node object
    auto arg_0 = Napi::Boolean::New(env, result);

    return arg_0;
}
Napi::Value NJSIWalletController::GetBalanceSimple(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIWalletController::GetBalanceSimple needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = IWalletController::GetBalanceSimple();

    //Wrap result in node object
    auto arg_0 = Napi::Number::New(env, result);

    return arg_0;
}
Napi::Value NJSIWalletController::GetBalance(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIWalletController::GetBalance needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = IWalletController::GetBalance();

    //Wrap result in node object
    auto arg_0 = Napi::Object::New(env);
    auto arg_0_1 = Napi::Number::New(env, result.availableIncludingLocked);
    arg_0.Set("availableIncludingLocked", arg_0_1);
    auto arg_0_2 = Napi::Number::New(env, result.availableExcludingLocked);
    arg_0.Set("availableExcludingLocked", arg_0_2);
    auto arg_0_3 = Napi::Number::New(env, result.availableLocked);
    arg_0.Set("availableLocked", arg_0_3);
    auto arg_0_4 = Napi::Number::New(env, result.unconfirmedIncludingLocked);
    arg_0.Set("unconfirmedIncludingLocked", arg_0_4);
    auto arg_0_5 = Napi::Number::New(env, result.unconfirmedExcludingLocked);
    arg_0.Set("unconfirmedExcludingLocked", arg_0_5);
    auto arg_0_6 = Napi::Number::New(env, result.unconfirmedLocked);
    arg_0.Set("unconfirmedLocked", arg_0_6);
    auto arg_0_7 = Napi::Number::New(env, result.immatureIncludingLocked);
    arg_0.Set("immatureIncludingLocked", arg_0_7);
    auto arg_0_8 = Napi::Number::New(env, result.immatureExcludingLocked);
    arg_0.Set("immatureExcludingLocked", arg_0_8);
    auto arg_0_9 = Napi::Number::New(env, result.immatureLocked);
    arg_0.Set("immatureLocked", arg_0_9);
    auto arg_0_10 = Napi::Number::New(env, result.totalLocked);
    arg_0.Set("totalLocked", arg_0_10);


    return arg_0;
}

Napi::FunctionReference NJSIWalletController::constructor;

Napi::Object NJSIWalletController::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSIWalletController", {
    InstanceMethod("setListener", &NJSIWalletController::setListener),
    InstanceMethod("HaveUnconfirmedFunds", &NJSIWalletController::HaveUnconfirmedFunds),
    InstanceMethod("GetBalanceSimple", &NJSIWalletController::GetBalanceSimple),
    InstanceMethod("GetBalance", &NJSIWalletController::GetBalance),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSIWalletController", func);
    return exports;
}
