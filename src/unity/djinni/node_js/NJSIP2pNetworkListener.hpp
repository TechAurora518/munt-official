// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#ifndef DJINNI_GENERATED_NJSIP2PNETWORKLISTENER_HPP
#define DJINNI_GENERATED_NJSIP2PNETWORKLISTENER_HPP


#include <cstdint>

#include <napi.h>
#include <uv.h>
#include <i_p2p_network_listener.hpp>

using namespace std;

class NJSIP2pNetworkListener: public Napi::ObjectWrap<NJSIP2pNetworkListener> {
public:

    static Napi::FunctionReference constructor;
    static Napi::Object Init(Napi::Env env, Napi::Object exports);
    NJSIP2pNetworkListener(const Napi::CallbackInfo& info) : Napi::ObjectWrap<NJSIP2pNetworkListener>(info){};

    /** Notify that p2p networking has been enabled */
    void onNetworkEnabled();

    /** Notify that p2p networking has been disabled */
    void onNetworkDisabled();

    /** Notify that number of peers has changed */
    void onConnectionCountChanged(int32_t numConnections);

    /** Notify that amount of data sent/received has changed */
    void onBytesChanged(int32_t totalRecv, int32_t totalSent);

private:
    /** Notify that p2p networking has been enabled */
    void onNetworkEnabled(const Napi::CallbackInfo& info);
    void onNetworkEnabled_aimpl__();

    /** Notify that p2p networking has been disabled */
    void onNetworkDisabled(const Napi::CallbackInfo& info);
    void onNetworkDisabled_aimpl__();

    /** Notify that number of peers has changed */
    void onConnectionCountChanged(const Napi::CallbackInfo& info);
    void onConnectionCountChanged_aimpl__(int32_t numConnections);

    /** Notify that amount of data sent/received has changed */
    void onBytesChanged(const Napi::CallbackInfo& info);
    void onBytesChanged_aimpl__(int32_t totalRecv, int32_t totalSent);

};
#endif //DJINNI_GENERATED_NJSIP2PNETWORKLISTENER_HPP
