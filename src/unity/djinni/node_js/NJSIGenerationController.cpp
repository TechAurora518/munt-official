// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSIGenerationController.hpp"
using namespace std;

void NJSIGenerationController::setListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIGenerationController::setListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<NJSIGenerationListener> arg_0(std::shared_ptr<NJSIGenerationListener>{}, NJSIGenerationListener::Unwrap(info[0].As<Napi::Object>()));

    try
    {
        IGenerationController::setListener(arg_0);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSIGenerationController::startGeneration(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        Napi::Error::New(env, "NJSIGenerationController::startGeneration needs 3 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    auto arg_0 = info[0].ToNumber().Int32Value();
    auto arg_1 = info[1].ToNumber().Int32Value();
    std::string arg_2 = info[2].As<Napi::String>();

    try
    {
        auto result = IGenerationController::startGeneration(arg_0,arg_1,arg_2);

        //Wrap result in node object
        auto arg_3 = Napi::Value::From(env, result);

        return arg_3;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::stopGeneration(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::stopGeneration needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::stopGeneration();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::getGenerationAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::getGenerationAddress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::getGenerationAddress();

        //Wrap result in node object
        auto arg_0 = Napi::String::New(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::getGenerationOverrideAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::getGenerationOverrideAddress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::getGenerationOverrideAddress();

        //Wrap result in node object
        auto arg_0 = Napi::String::New(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::setGenerationOverrideAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSIGenerationController::setGenerationOverrideAddress needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = IGenerationController::setGenerationOverrideAddress(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::getAvailableCores(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::getAvailableCores needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::getAvailableCores();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::getMinimumMemory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::getMinimumMemory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::getMinimumMemory();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSIGenerationController::getMaximumMemory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSIGenerationController::getMaximumMemory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = IGenerationController::getMaximumMemory();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}

Napi::FunctionReference NJSIGenerationController::constructor;

Napi::Object NJSIGenerationController::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSIGenerationController", {
    InstanceMethod("setListener", &NJSIGenerationController::setListener),
    InstanceMethod("startGeneration", &NJSIGenerationController::startGeneration),
    InstanceMethod("stopGeneration", &NJSIGenerationController::stopGeneration),
    InstanceMethod("getGenerationAddress", &NJSIGenerationController::getGenerationAddress),
    InstanceMethod("getGenerationOverrideAddress", &NJSIGenerationController::getGenerationOverrideAddress),
    InstanceMethod("setGenerationOverrideAddress", &NJSIGenerationController::setGenerationOverrideAddress),
    InstanceMethod("getAvailableCores", &NJSIGenerationController::getAvailableCores),
    InstanceMethod("getMinimumMemory", &NJSIGenerationController::getMinimumMemory),
    InstanceMethod("getMaximumMemory", &NJSIGenerationController::getMaximumMemory),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSIGenerationController", func);
    return exports;
}
