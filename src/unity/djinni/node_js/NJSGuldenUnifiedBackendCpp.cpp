// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSGuldenUnifiedBackendCpp.hpp"
using namespace std;

Napi::Value NJSGuldenUnifiedBackend::BuildInfo(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::BuildInfo needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::BuildInfo();

    //Wrap result in node object
    auto arg_0 = Napi::String::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::InitUnityLib(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 7)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::InitUnityLib needs 7 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    auto arg_2 = info[2].ToNumber().Int64Value();
    auto arg_3 = info[3].ToNumber().Int64Value();
    auto arg_4 = info[4].ToBoolean().Value();
    std::shared_ptr<GuldenUnifiedFrontend> arg_5(Napi::ObjectWrap<GuldenUnifiedFrontend>::Unwrap(info[5].As<Napi::Object>()));

    std::string arg_6 = info[6].As<Napi::String>();

    auto result = GuldenUnifiedBackend::InitUnityLib(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6);

    //Wrap result in node object
    auto arg_7 = Napi::Number::New(env, result);

    return arg_7;
}
void NJSGuldenUnifiedBackend::InitUnityLibThreaded(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 7)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::InitUnityLibThreaded needs 7 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    auto arg_2 = info[2].ToNumber().Int64Value();
    auto arg_3 = info[3].ToNumber().Int64Value();
    auto arg_4 = info[4].ToBoolean().Value();
    std::shared_ptr<GuldenUnifiedFrontend> arg_5(Napi::ObjectWrap<GuldenUnifiedFrontend>::Unwrap(info[5].As<Napi::Object>()));

    std::string arg_6 = info[6].As<Napi::String>();
    GuldenUnifiedBackend::InitUnityLibThreaded(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6);
}
Napi::Value NJSGuldenUnifiedBackend::InitWalletFromRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::InitWalletFromRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::InitWalletFromRecoveryPhrase(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::ContinueWalletFromRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ContinueWalletFromRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::ContinueWalletFromRecoveryPhrase(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::InitWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::InitWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::InitWalletLinkedFromURI(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::ContinueWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ContinueWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::ContinueWalletLinkedFromURI(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::InitWalletFromAndroidLegacyProtoWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::InitWalletFromAndroidLegacyProtoWallet needs 3 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    std::string arg_2 = info[2].As<Napi::String>();

    auto result = GuldenUnifiedBackend::InitWalletFromAndroidLegacyProtoWallet(arg_0,arg_1,arg_2);

    //Wrap result in node object
    auto arg_3 = Napi::Boolean::New(env, result);

    return arg_3;
}
Napi::Value NJSGuldenUnifiedBackend::isValidAndroidLegacyProtoWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::isValidAndroidLegacyProtoWallet needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::isValidAndroidLegacyProtoWallet(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Number::New(env, (int)result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::IsValidLinkURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::IsValidLinkURI needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = GuldenUnifiedBackend::IsValidLinkURI(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::ReplaceWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ReplaceWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::ReplaceWalletLinkedFromURI(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::EraseWalletSeedsAndAccounts(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::EraseWalletSeedsAndAccounts needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::EraseWalletSeedsAndAccounts();

    //Wrap result in node object
    auto arg_0 = Napi::Boolean::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::IsValidRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::IsValidRecoveryPhrase needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = GuldenUnifiedBackend::IsValidRecoveryPhrase(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::GenerateRecoveryMnemonic(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::GenerateRecoveryMnemonic needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::GenerateRecoveryMnemonic();

    //Wrap result in node object
    auto arg_0 = Napi::String::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::ComposeRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ComposeRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    auto arg_1 = info[1].ToNumber().Int64Value();

    auto result = GuldenUnifiedBackend::ComposeRecoveryPhrase(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::String::New(env, result);

    return arg_2;
}
void NJSGuldenUnifiedBackend::TerminateUnityLib(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::TerminateUnityLib needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    GuldenUnifiedBackend::TerminateUnityLib();
}
Napi::Value NJSGuldenUnifiedBackend::QRImageFromString(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::QRImageFromString needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    auto arg_1 = info[1].ToNumber().Int32Value();

    auto result = GuldenUnifiedBackend::QRImageFromString(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Object::New(env);
    auto arg_2_1 = Napi::Number::New(env, result.width);
    arg_2.Set("width", arg_2_1);
    auto arg_2_2 = Napi::Array::New(env);
    for(size_t arg_2_2_id = 0; arg_2_2_id < result.pixel_data.size(); arg_2_2_id++)
    {
        auto arg_2_2_elem = Napi::Number::New(env, result.pixel_data[arg_2_2_id]);
        arg_2_2.Set((int)arg_2_2_id,arg_2_2_elem);
    }

    arg_2.Set("pixel_data", arg_2_2);


    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::GetReceiveAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::GetReceiveAddress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::GetReceiveAddress();

    //Wrap result in node object
    auto arg_0 = Napi::String::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::GetRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::GetRecoveryPhrase needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::GetRecoveryPhrase();

    //Wrap result in node object
    auto arg_0 = Napi::String::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::IsMnemonicWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::IsMnemonicWallet needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::IsMnemonicWallet();

    //Wrap result in node object
    auto arg_0 = Napi::Boolean::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::IsMnemonicCorrect(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::IsMnemonicCorrect needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = GuldenUnifiedBackend::IsMnemonicCorrect(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::UnlockWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::UnlockWallet needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = GuldenUnifiedBackend::UnlockWallet(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Boolean::New(env, result);

    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::LockWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::LockWallet needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::LockWallet();

    //Wrap result in node object
    auto arg_0 = Napi::Boolean::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::ChangePassword(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ChangePassword needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    auto result = GuldenUnifiedBackend::ChangePassword(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Boolean::New(env, result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::HaveUnconfirmedFunds(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::HaveUnconfirmedFunds needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::HaveUnconfirmedFunds();

    //Wrap result in node object
    auto arg_0 = Napi::Boolean::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::GetBalance(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::GetBalance needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::GetBalance();

    //Wrap result in node object
    auto arg_0 = Napi::Number::New(env, result);

    return arg_0;
}
void NJSGuldenUnifiedBackend::DoRescan(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::DoRescan needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    GuldenUnifiedBackend::DoRescan();
}
Napi::Value NJSGuldenUnifiedBackend::IsValidRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::IsValidRecipient needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("scheme");
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("path");
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("items");
    unordered_map<std::string, std::string> arg_0_3;
    auto arg_0_3_prop_names = field_arg_0_3.ToObject().GetPropertyNames();
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_prop_names.Length(); arg_0_3_id++)
    {
        std::string arg_0_3_key = arg_0_3_prop_names.Get(arg_0_3_id).ToString();
        std::string arg_0_3_value = arg_0_3_prop_names.Get(arg_0_3_key).ToString();
        arg_0_3.emplace(arg_0_3_key,arg_0_3_value);
    }

    UriRecord arg_0(arg_0_1, arg_0_2, arg_0_3);


    auto result = GuldenUnifiedBackend::IsValidRecipient(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Object::New(env);
    auto arg_1_1 = Napi::Boolean::New(env, result.valid);
    arg_1.Set("valid", arg_1_1);
    auto arg_1_2 = Napi::String::New(env, result.address);
    arg_1.Set("address", arg_1_2);
    auto arg_1_3 = Napi::String::New(env, result.label);
    arg_1.Set("label", arg_1_3);
    auto arg_1_4 = Napi::String::New(env, result.desc);
    arg_1.Set("desc", arg_1_4);
    auto arg_1_5 = Napi::Number::New(env, result.amount);
    arg_1.Set("amount", arg_1_5);


    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::feeForRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::feeForRecipient needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("valid");
    auto arg_0_1 = field_arg_0_1.ToBoolean().Value();

    auto field_arg_0_2 = info[0].ToObject().Get("address");
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("label");
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("desc");
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();

    auto field_arg_0_5 = info[0].ToObject().Get("amount");
    auto arg_0_5 = field_arg_0_5.ToNumber().Int64Value();
    UriRecipient arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);


    auto result = GuldenUnifiedBackend::feeForRecipient(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Number::New(env, result);

    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::performPaymentToRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::performPaymentToRecipient needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("valid");
    auto arg_0_1 = field_arg_0_1.ToBoolean().Value();

    auto field_arg_0_2 = info[0].ToObject().Get("address");
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("label");
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("desc");
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();

    auto field_arg_0_5 = info[0].ToObject().Get("amount");
    auto arg_0_5 = field_arg_0_5.ToNumber().Int64Value();
    UriRecipient arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);

    auto arg_1 = info[1].ToBoolean().Value();

    auto result = GuldenUnifiedBackend::performPaymentToRecipient(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Napi::Number::New(env, (int)result);

    return arg_2;
}
Napi::Value NJSGuldenUnifiedBackend::getTransactionHistory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getTransactionHistory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getTransactionHistory();

    //Wrap result in node object
    auto arg_0 = Napi::Array::New(env);
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Napi::Object::New(env);
        auto arg_0_elem_1 = Napi::String::New(env, result[arg_0_id].txHash);
        arg_0_elem.Set("txHash", arg_0_elem_1);
        auto arg_0_elem_2 = Napi::Number::New(env, result[arg_0_id].timeStamp);
        arg_0_elem.Set("timeStamp", arg_0_elem_2);
        auto arg_0_elem_3 = Napi::Number::New(env, result[arg_0_id].amount);
        arg_0_elem.Set("amount", arg_0_elem_3);
        auto arg_0_elem_4 = Napi::Number::New(env, result[arg_0_id].fee);
        arg_0_elem.Set("fee", arg_0_elem_4);
        auto arg_0_elem_5 = Napi::Number::New(env, (int)result[arg_0_id].status);
        arg_0_elem.Set("status", arg_0_elem_5);
        auto arg_0_elem_6 = Napi::Number::New(env, result[arg_0_id].height);
        arg_0_elem.Set("height", arg_0_elem_6);
        auto arg_0_elem_7 = Napi::Number::New(env, result[arg_0_id].blockTime);
        arg_0_elem.Set("blockTime", arg_0_elem_7);
        auto arg_0_elem_8 = Napi::Number::New(env, result[arg_0_id].depth);
        arg_0_elem.Set("depth", arg_0_elem_8);
        auto arg_0_elem_9 = Napi::Array::New(env);
        for(size_t arg_0_elem_9_id = 0; arg_0_elem_9_id < result[arg_0_id].inputs.size(); arg_0_elem_9_id++)
        {
            auto arg_0_elem_9_elem = Napi::Object::New(env);
            auto arg_0_elem_9_elem_1 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].address);
            arg_0_elem_9_elem.Set("address", arg_0_elem_9_elem_1);
            auto arg_0_elem_9_elem_2 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].label);
            arg_0_elem_9_elem.Set("label", arg_0_elem_9_elem_2);
            auto arg_0_elem_9_elem_3 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].desc);
            arg_0_elem_9_elem.Set("desc", arg_0_elem_9_elem_3);
            auto arg_0_elem_9_elem_4 = Napi::Boolean::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].isMine);
            arg_0_elem_9_elem.Set("isMine", arg_0_elem_9_elem_4);

            arg_0_elem_9.Set((int)arg_0_elem_9_id,arg_0_elem_9_elem);
        }

        arg_0_elem.Set("inputs", arg_0_elem_9);
        auto arg_0_elem_10 = Napi::Array::New(env);
        for(size_t arg_0_elem_10_id = 0; arg_0_elem_10_id < result[arg_0_id].outputs.size(); arg_0_elem_10_id++)
        {
            auto arg_0_elem_10_elem = Napi::Object::New(env);
            auto arg_0_elem_10_elem_1 = Napi::Number::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].amount);
            arg_0_elem_10_elem.Set("amount", arg_0_elem_10_elem_1);
            auto arg_0_elem_10_elem_2 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].address);
            arg_0_elem_10_elem.Set("address", arg_0_elem_10_elem_2);
            auto arg_0_elem_10_elem_3 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].label);
            arg_0_elem_10_elem.Set("label", arg_0_elem_10_elem_3);
            auto arg_0_elem_10_elem_4 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].desc);
            arg_0_elem_10_elem.Set("desc", arg_0_elem_10_elem_4);
            auto arg_0_elem_10_elem_5 = Napi::Boolean::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].isMine);
            arg_0_elem_10_elem.Set("isMine", arg_0_elem_10_elem_5);

            arg_0_elem_10.Set((int)arg_0_elem_10_id,arg_0_elem_10_elem);
        }

        arg_0_elem.Set("outputs", arg_0_elem_10);

        arg_0.Set((int)arg_0_id,arg_0_elem);
    }


    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::getTransaction(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getTransaction needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    auto result = GuldenUnifiedBackend::getTransaction(arg_0);

    //Wrap result in node object
    auto arg_1 = Napi::Object::New(env);
    auto arg_1_1 = Napi::String::New(env, result.txHash);
    arg_1.Set("txHash", arg_1_1);
    auto arg_1_2 = Napi::Number::New(env, result.timeStamp);
    arg_1.Set("timeStamp", arg_1_2);
    auto arg_1_3 = Napi::Number::New(env, result.amount);
    arg_1.Set("amount", arg_1_3);
    auto arg_1_4 = Napi::Number::New(env, result.fee);
    arg_1.Set("fee", arg_1_4);
    auto arg_1_5 = Napi::Number::New(env, (int)result.status);
    arg_1.Set("status", arg_1_5);
    auto arg_1_6 = Napi::Number::New(env, result.height);
    arg_1.Set("height", arg_1_6);
    auto arg_1_7 = Napi::Number::New(env, result.blockTime);
    arg_1.Set("blockTime", arg_1_7);
    auto arg_1_8 = Napi::Number::New(env, result.depth);
    arg_1.Set("depth", arg_1_8);
    auto arg_1_9 = Napi::Array::New(env);
    for(size_t arg_1_9_id = 0; arg_1_9_id < result.inputs.size(); arg_1_9_id++)
    {
        auto arg_1_9_elem = Napi::Object::New(env);
        auto arg_1_9_elem_1 = Napi::String::New(env, result.inputs[arg_1_9_id].address);
        arg_1_9_elem.Set("address", arg_1_9_elem_1);
        auto arg_1_9_elem_2 = Napi::String::New(env, result.inputs[arg_1_9_id].label);
        arg_1_9_elem.Set("label", arg_1_9_elem_2);
        auto arg_1_9_elem_3 = Napi::String::New(env, result.inputs[arg_1_9_id].desc);
        arg_1_9_elem.Set("desc", arg_1_9_elem_3);
        auto arg_1_9_elem_4 = Napi::Boolean::New(env, result.inputs[arg_1_9_id].isMine);
        arg_1_9_elem.Set("isMine", arg_1_9_elem_4);

        arg_1_9.Set((int)arg_1_9_id,arg_1_9_elem);
    }

    arg_1.Set("inputs", arg_1_9);
    auto arg_1_10 = Napi::Array::New(env);
    for(size_t arg_1_10_id = 0; arg_1_10_id < result.outputs.size(); arg_1_10_id++)
    {
        auto arg_1_10_elem = Napi::Object::New(env);
        auto arg_1_10_elem_1 = Napi::Number::New(env, result.outputs[arg_1_10_id].amount);
        arg_1_10_elem.Set("amount", arg_1_10_elem_1);
        auto arg_1_10_elem_2 = Napi::String::New(env, result.outputs[arg_1_10_id].address);
        arg_1_10_elem.Set("address", arg_1_10_elem_2);
        auto arg_1_10_elem_3 = Napi::String::New(env, result.outputs[arg_1_10_id].label);
        arg_1_10_elem.Set("label", arg_1_10_elem_3);
        auto arg_1_10_elem_4 = Napi::String::New(env, result.outputs[arg_1_10_id].desc);
        arg_1_10_elem.Set("desc", arg_1_10_elem_4);
        auto arg_1_10_elem_5 = Napi::Boolean::New(env, result.outputs[arg_1_10_id].isMine);
        arg_1_10_elem.Set("isMine", arg_1_10_elem_5);

        arg_1_10.Set((int)arg_1_10_id,arg_1_10_elem);
    }

    arg_1.Set("outputs", arg_1_10);


    return arg_1;
}
Napi::Value NJSGuldenUnifiedBackend::getMutationHistory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getMutationHistory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getMutationHistory();

    //Wrap result in node object
    auto arg_0 = Napi::Array::New(env);
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Napi::Object::New(env);
        auto arg_0_elem_1 = Napi::Number::New(env, result[arg_0_id].change);
        arg_0_elem.Set("change", arg_0_elem_1);
        auto arg_0_elem_2 = Napi::Number::New(env, result[arg_0_id].timestamp);
        arg_0_elem.Set("timestamp", arg_0_elem_2);
        auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].txHash);
        arg_0_elem.Set("txHash", arg_0_elem_3);
        auto arg_0_elem_4 = Napi::Number::New(env, (int)result[arg_0_id].status);
        arg_0_elem.Set("status", arg_0_elem_4);
        auto arg_0_elem_5 = Napi::Number::New(env, result[arg_0_id].depth);
        arg_0_elem.Set("depth", arg_0_elem_5);

        arg_0.Set((int)arg_0_id,arg_0_elem);
    }


    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::getAddressBookRecords(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getAddressBookRecords needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getAddressBookRecords();

    //Wrap result in node object
    auto arg_0 = Napi::Array::New(env);
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Napi::Object::New(env);
        auto arg_0_elem_1 = Napi::String::New(env, result[arg_0_id].address);
        arg_0_elem.Set("address", arg_0_elem_1);
        auto arg_0_elem_2 = Napi::String::New(env, result[arg_0_id].name);
        arg_0_elem.Set("name", arg_0_elem_2);
        auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].desc);
        arg_0_elem.Set("desc", arg_0_elem_3);
        auto arg_0_elem_4 = Napi::String::New(env, result[arg_0_id].purpose);
        arg_0_elem.Set("purpose", arg_0_elem_4);

        arg_0.Set((int)arg_0_id,arg_0_elem);
    }


    return arg_0;
}
void NJSGuldenUnifiedBackend::addAddressBookRecord(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::addAddressBookRecord needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("address");
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("name");
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("desc");
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("purpose");
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();
    AddressRecord arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);

    GuldenUnifiedBackend::addAddressBookRecord(arg_0);
}
void NJSGuldenUnifiedBackend::deleteAddressBookRecord(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::deleteAddressBookRecord needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("address");
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("name");
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("desc");
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("purpose");
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();
    AddressRecord arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);

    GuldenUnifiedBackend::deleteAddressBookRecord(arg_0);
}
void NJSGuldenUnifiedBackend::PersistAndPruneForSPV(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::PersistAndPruneForSPV needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    GuldenUnifiedBackend::PersistAndPruneForSPV();
}
void NJSGuldenUnifiedBackend::ResetUnifiedProgress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::ResetUnifiedProgress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    GuldenUnifiedBackend::ResetUnifiedProgress();
}
Napi::Value NJSGuldenUnifiedBackend::getPeers(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getPeers needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getPeers();

    //Wrap result in node object
    auto arg_0 = Napi::Array::New(env);
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Napi::Object::New(env);
        auto arg_0_elem_1 = Napi::Number::New(env, result[arg_0_id].id);
        arg_0_elem.Set("id", arg_0_elem_1);
        auto arg_0_elem_2 = Napi::String::New(env, result[arg_0_id].ip);
        arg_0_elem.Set("ip", arg_0_elem_2);
        auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].hostname);
        arg_0_elem.Set("hostname", arg_0_elem_3);
        auto arg_0_elem_4 = Napi::Number::New(env, result[arg_0_id].start_height);
        arg_0_elem.Set("start_height", arg_0_elem_4);
        auto arg_0_elem_5 = Napi::Number::New(env, result[arg_0_id].synced_height);
        arg_0_elem.Set("synced_height", arg_0_elem_5);
        auto arg_0_elem_6 = Napi::Number::New(env, result[arg_0_id].common_height);
        arg_0_elem.Set("common_height", arg_0_elem_6);
        auto arg_0_elem_7 = Napi::Number::New(env, result[arg_0_id].latency);
        arg_0_elem.Set("latency", arg_0_elem_7);
        auto arg_0_elem_8 = Napi::String::New(env, result[arg_0_id].userAgent);
        arg_0_elem.Set("userAgent", arg_0_elem_8);
        auto arg_0_elem_9 = Napi::Number::New(env, result[arg_0_id].protocol);
        arg_0_elem.Set("protocol", arg_0_elem_9);

        arg_0.Set((int)arg_0_id,arg_0_elem);
    }


    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::getLastSPVBlockInfos(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getLastSPVBlockInfos needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getLastSPVBlockInfos();

    //Wrap result in node object
    auto arg_0 = Napi::Array::New(env);
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = Napi::Object::New(env);
        auto arg_0_elem_1 = Napi::Number::New(env, result[arg_0_id].height);
        arg_0_elem.Set("height", arg_0_elem_1);
        auto arg_0_elem_2 = Napi::Number::New(env, result[arg_0_id].timeStamp);
        arg_0_elem.Set("timeStamp", arg_0_elem_2);
        auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].blockHash);
        arg_0_elem.Set("blockHash", arg_0_elem_3);

        arg_0.Set((int)arg_0_id,arg_0_elem);
    }


    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::getUnifiedProgress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getUnifiedProgress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getUnifiedProgress();

    //Wrap result in node object
    auto arg_0 = Napi::Number::New(env, result);

    return arg_0;
}
Napi::Value NJSGuldenUnifiedBackend::getMonitoringStats(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::getMonitoringStats needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto result = GuldenUnifiedBackend::getMonitoringStats();

    //Wrap result in node object
    auto arg_0 = Napi::Object::New(env);
    auto arg_0_1 = Napi::Number::New(env, result.partialHeight);
    arg_0.Set("partialHeight", arg_0_1);
    auto arg_0_2 = Napi::Number::New(env, result.partialOffset);
    arg_0.Set("partialOffset", arg_0_2);
    auto arg_0_3 = Napi::Number::New(env, result.prunedHeight);
    arg_0.Set("prunedHeight", arg_0_3);
    auto arg_0_4 = Napi::Number::New(env, result.processedSPVHeight);
    arg_0.Set("processedSPVHeight", arg_0_4);
    auto arg_0_5 = Napi::Number::New(env, result.probableHeight);
    arg_0.Set("probableHeight", arg_0_5);


    return arg_0;
}
void NJSGuldenUnifiedBackend::RegisterMonitorListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::RegisterMonitorListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<GuldenMonitorListener> arg_0(Napi::ObjectWrap<GuldenMonitorListener>::Unwrap(info[0].As<Napi::Object>()));

    GuldenUnifiedBackend::RegisterMonitorListener(arg_0);
}
void NJSGuldenUnifiedBackend::UnregisterMonitorListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSGuldenUnifiedBackend::UnregisterMonitorListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<GuldenMonitorListener> arg_0(Napi::ObjectWrap<GuldenMonitorListener>::Unwrap(info[0].As<Napi::Object>()));

    GuldenUnifiedBackend::UnregisterMonitorListener(arg_0);
}

Napi::FunctionReference NJSGuldenUnifiedBackend::constructor;

Napi::Object NJSGuldenUnifiedBackend::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSGuldenUnifiedBackend", {
    InstanceMethod("BuildInfo", &NJSGuldenUnifiedBackend::BuildInfo),
    InstanceMethod("InitUnityLib", &NJSGuldenUnifiedBackend::InitUnityLib),
    InstanceMethod("InitUnityLibThreaded", &NJSGuldenUnifiedBackend::InitUnityLibThreaded),
    InstanceMethod("InitWalletFromRecoveryPhrase", &NJSGuldenUnifiedBackend::InitWalletFromRecoveryPhrase),
    InstanceMethod("ContinueWalletFromRecoveryPhrase", &NJSGuldenUnifiedBackend::ContinueWalletFromRecoveryPhrase),
    InstanceMethod("InitWalletLinkedFromURI", &NJSGuldenUnifiedBackend::InitWalletLinkedFromURI),
    InstanceMethod("ContinueWalletLinkedFromURI", &NJSGuldenUnifiedBackend::ContinueWalletLinkedFromURI),
    InstanceMethod("InitWalletFromAndroidLegacyProtoWallet", &NJSGuldenUnifiedBackend::InitWalletFromAndroidLegacyProtoWallet),
    InstanceMethod("isValidAndroidLegacyProtoWallet", &NJSGuldenUnifiedBackend::isValidAndroidLegacyProtoWallet),
    InstanceMethod("IsValidLinkURI", &NJSGuldenUnifiedBackend::IsValidLinkURI),
    InstanceMethod("ReplaceWalletLinkedFromURI", &NJSGuldenUnifiedBackend::ReplaceWalletLinkedFromURI),
    InstanceMethod("EraseWalletSeedsAndAccounts", &NJSGuldenUnifiedBackend::EraseWalletSeedsAndAccounts),
    InstanceMethod("IsValidRecoveryPhrase", &NJSGuldenUnifiedBackend::IsValidRecoveryPhrase),
    InstanceMethod("GenerateRecoveryMnemonic", &NJSGuldenUnifiedBackend::GenerateRecoveryMnemonic),
    InstanceMethod("ComposeRecoveryPhrase", &NJSGuldenUnifiedBackend::ComposeRecoveryPhrase),
    InstanceMethod("TerminateUnityLib", &NJSGuldenUnifiedBackend::TerminateUnityLib),
    InstanceMethod("QRImageFromString", &NJSGuldenUnifiedBackend::QRImageFromString),
    InstanceMethod("GetReceiveAddress", &NJSGuldenUnifiedBackend::GetReceiveAddress),
    InstanceMethod("GetRecoveryPhrase", &NJSGuldenUnifiedBackend::GetRecoveryPhrase),
    InstanceMethod("IsMnemonicWallet", &NJSGuldenUnifiedBackend::IsMnemonicWallet),
    InstanceMethod("IsMnemonicCorrect", &NJSGuldenUnifiedBackend::IsMnemonicCorrect),
    InstanceMethod("UnlockWallet", &NJSGuldenUnifiedBackend::UnlockWallet),
    InstanceMethod("LockWallet", &NJSGuldenUnifiedBackend::LockWallet),
    InstanceMethod("ChangePassword", &NJSGuldenUnifiedBackend::ChangePassword),
    InstanceMethod("HaveUnconfirmedFunds", &NJSGuldenUnifiedBackend::HaveUnconfirmedFunds),
    InstanceMethod("GetBalance", &NJSGuldenUnifiedBackend::GetBalance),
    InstanceMethod("DoRescan", &NJSGuldenUnifiedBackend::DoRescan),
    InstanceMethod("IsValidRecipient", &NJSGuldenUnifiedBackend::IsValidRecipient),
    InstanceMethod("feeForRecipient", &NJSGuldenUnifiedBackend::feeForRecipient),
    InstanceMethod("performPaymentToRecipient", &NJSGuldenUnifiedBackend::performPaymentToRecipient),
    InstanceMethod("getTransactionHistory", &NJSGuldenUnifiedBackend::getTransactionHistory),
    InstanceMethod("getTransaction", &NJSGuldenUnifiedBackend::getTransaction),
    InstanceMethod("getMutationHistory", &NJSGuldenUnifiedBackend::getMutationHistory),
    InstanceMethod("getAddressBookRecords", &NJSGuldenUnifiedBackend::getAddressBookRecords),
    InstanceMethod("addAddressBookRecord", &NJSGuldenUnifiedBackend::addAddressBookRecord),
    InstanceMethod("deleteAddressBookRecord", &NJSGuldenUnifiedBackend::deleteAddressBookRecord),
    InstanceMethod("PersistAndPruneForSPV", &NJSGuldenUnifiedBackend::PersistAndPruneForSPV),
    InstanceMethod("ResetUnifiedProgress", &NJSGuldenUnifiedBackend::ResetUnifiedProgress),
    InstanceMethod("getPeers", &NJSGuldenUnifiedBackend::getPeers),
    InstanceMethod("getLastSPVBlockInfos", &NJSGuldenUnifiedBackend::getLastSPVBlockInfos),
    InstanceMethod("getUnifiedProgress", &NJSGuldenUnifiedBackend::getUnifiedProgress),
    InstanceMethod("getMonitoringStats", &NJSGuldenUnifiedBackend::getMonitoringStats),
    InstanceMethod("RegisterMonitorListener", &NJSGuldenUnifiedBackend::RegisterMonitorListener),
    InstanceMethod("UnregisterMonitorListener", &NJSGuldenUnifiedBackend::UnregisterMonitorListener),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSGuldenUnifiedBackend", func);
    return exports;
}
