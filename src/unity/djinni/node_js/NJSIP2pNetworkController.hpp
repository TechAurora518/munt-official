// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#ifndef DJINNI_GENERATED_NJSIP2PNETWORKCONTROLLER_HPP
#define DJINNI_GENERATED_NJSIP2PNETWORKCONTROLLER_HPP


#include "NJSIP2pNetworkListener.hpp"
#include "banned_peer_record.hpp"
#include "peer_record.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <napi.h>
#include <uv.h>
#include <i_p2p_network_controller.hpp>

using namespace std;

class NJSIP2pNetworkController: public Napi::ObjectWrap<NJSIP2pNetworkController> {
public:

    static Napi::FunctionReference constructor;
    static Napi::Object Init(Napi::Env env, Napi::Object exports);
    NJSIP2pNetworkController(const Napi::CallbackInfo& info) : Napi::ObjectWrap<NJSIP2pNetworkController>(info){};

private:
    /** Register listener to be notified of networking events */
    void setListener(const Napi::CallbackInfo& info);

    /** Turn p2p networking off */
    void disableNetwork(const Napi::CallbackInfo& info);

    /** Turn p2p networking on */
    void enableNetwork(const Napi::CallbackInfo& info);

    /** Get connected peer info */
    Napi::Value getPeerInfo(const Napi::CallbackInfo& info);

    /** Get all banned peers */
    Napi::Value listBannedPeers(const Napi::CallbackInfo& info);

    Napi::Value banPeer(const Napi::CallbackInfo& info);

    /** Unban a single peer */
    Napi::Value unbanPeer(const Napi::CallbackInfo& info);

    /** Disconnect a specific peer */
    Napi::Value disconnectPeer(const Napi::CallbackInfo& info);

    /** Clear all banned peers */
    Napi::Value ClearBanned(const Napi::CallbackInfo& info);

};
#endif //DJINNI_GENERATED_NJSIP2PNETWORKCONTROLLER_HPP
