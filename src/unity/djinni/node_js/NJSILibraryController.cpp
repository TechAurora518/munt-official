// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#include "NJSILibraryController.hpp"
using namespace std;

Napi::Value NJSILibraryController::BuildInfo(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::BuildInfo needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::BuildInfo();

        //Wrap result in node object
        auto arg_0 = Napi::String::New(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::InitUnityLib(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 8)
    {
        Napi::Error::New(env, "NJSILibraryController::InitUnityLib needs 8 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    auto arg_2 = info[2].ToNumber().Int64Value();
    auto arg_3 = info[3].ToNumber().Int64Value();
    auto arg_4 = info[4].ToBoolean().Value();
    auto arg_5 = info[5].ToBoolean().Value();
    std::shared_ptr<NJSILibraryListener> arg_6(std::shared_ptr<NJSILibraryListener>{}, NJSILibraryListener::Unwrap(info[6].As<Napi::Object>()));

    std::string arg_7 = info[7].As<Napi::String>();

    try
    {
        auto result = ILibraryController::InitUnityLib(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6,arg_7);

        //Wrap result in node object
        auto arg_8 = Napi::Value::From(env, result);

        return arg_8;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSILibraryController::InitUnityLibThreaded(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 8)
    {
        Napi::Error::New(env, "NJSILibraryController::InitUnityLibThreaded needs 8 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    auto arg_2 = info[2].ToNumber().Int64Value();
    auto arg_3 = info[3].ToNumber().Int64Value();
    auto arg_4 = info[4].ToBoolean().Value();
    auto arg_5 = info[5].ToBoolean().Value();
    std::shared_ptr<NJSILibraryListener> arg_6(std::shared_ptr<NJSILibraryListener>{}, NJSILibraryListener::Unwrap(info[6].As<Napi::Object>()));

    std::string arg_7 = info[7].As<Napi::String>();
    try
    {
        ILibraryController::InitUnityLibThreaded(arg_0,arg_1,arg_2,arg_3,arg_4,arg_5,arg_6,arg_7);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSILibraryController::InitWalletFromRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::InitWalletFromRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::InitWalletFromRecoveryPhrase(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::ContinueWalletFromRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::ContinueWalletFromRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::ContinueWalletFromRecoveryPhrase(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::InitWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::InitWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::InitWalletLinkedFromURI(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::ContinueWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::ContinueWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::ContinueWalletLinkedFromURI(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::InitWalletFromAndroidLegacyProtoWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        Napi::Error::New(env, "NJSILibraryController::InitWalletFromAndroidLegacyProtoWallet needs 3 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();
    std::string arg_2 = info[2].As<Napi::String>();

    try
    {
        auto result = ILibraryController::InitWalletFromAndroidLegacyProtoWallet(arg_0,arg_1,arg_2);

        //Wrap result in node object
        auto arg_3 = Napi::Value::From(env, result);

        return arg_3;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::isValidAndroidLegacyProtoWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::isValidAndroidLegacyProtoWallet needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::isValidAndroidLegacyProtoWallet(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, (int)result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsValidLinkURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsValidLinkURI needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::IsValidLinkURI(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::ReplaceWalletLinkedFromURI(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::ReplaceWalletLinkedFromURI needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::ReplaceWalletLinkedFromURI(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::EraseWalletSeedsAndAccounts(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::EraseWalletSeedsAndAccounts needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::EraseWalletSeedsAndAccounts();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsValidRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsValidRecoveryPhrase needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::IsValidRecoveryPhrase(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GenerateRecoveryMnemonic(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GenerateRecoveryMnemonic needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GenerateRecoveryMnemonic();

        //Wrap result in node object
        auto arg_0 = Napi::Object::New(env);
        auto arg_0_1 = Napi::String::New(env, result.phrase_with_birth_number);
        arg_0.Set("phrase_with_birth_number", arg_0_1);
        auto arg_0_2 = Napi::String::New(env, result.phrase);
        arg_0.Set("phrase", arg_0_2);
        auto arg_0_3 = Napi::Value::From(env, result.birth_number);
        arg_0.Set("birth_number", arg_0_3);


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GenerateGenesisKeys(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GenerateGenesisKeys needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GenerateGenesisKeys();

        //Wrap result in node object
        auto arg_0 = Napi::String::New(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::ComposeRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::ComposeRecoveryPhrase needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    auto arg_1 = info[1].ToNumber().Int64Value();

    try
    {
        auto result = ILibraryController::ComposeRecoveryPhrase(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Object::New(env);
        auto arg_2_1 = Napi::String::New(env, result.phrase_with_birth_number);
        arg_2.Set("phrase_with_birth_number", arg_2_1);
        auto arg_2_2 = Napi::String::New(env, result.phrase);
        arg_2.Set("phrase", arg_2_2);
        auto arg_2_3 = Napi::Value::From(env, result.birth_number);
        arg_2.Set("birth_number", arg_2_3);


        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSILibraryController::TerminateUnityLib(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::TerminateUnityLib needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    try
    {
        ILibraryController::TerminateUnityLib();
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSILibraryController::QRImageFromString(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::QRImageFromString needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    auto arg_1 = info[1].ToNumber().Int32Value();

    try
    {
        auto result = ILibraryController::QRImageFromString(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Object::New(env);
        auto arg_2_1 = Napi::Value::From(env, result.width);
        arg_2.Set("width", arg_2_1);
        auto arg_2_2 = Napi::Array::New(env);
        for(size_t arg_2_2_id = 0; arg_2_2_id < result.pixel_data.size(); arg_2_2_id++)
        {
            auto arg_2_2_elem = Napi::Value::From(env, result.pixel_data[arg_2_2_id]);
            arg_2_2.Set((int)arg_2_2_id,arg_2_2_elem);
        }

        arg_2.Set("pixel_data", arg_2_2);


        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GetReceiveAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GetReceiveAddress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GetReceiveAddress();

        //Wrap result in node object
        auto arg_0 = Napi::String::New(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GetRecoveryPhrase(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GetRecoveryPhrase needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GetRecoveryPhrase();

        //Wrap result in node object
        auto arg_0 = Napi::Object::New(env);
        auto arg_0_1 = Napi::String::New(env, result.phrase_with_birth_number);
        arg_0.Set("phrase_with_birth_number", arg_0_1);
        auto arg_0_2 = Napi::String::New(env, result.phrase);
        arg_0.Set("phrase", arg_0_2);
        auto arg_0_3 = Napi::Value::From(env, result.birth_number);
        arg_0.Set("birth_number", arg_0_3);


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsMnemonicWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::IsMnemonicWallet needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::IsMnemonicWallet();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsMnemonicCorrect(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsMnemonicCorrect needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::IsMnemonicCorrect(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GetMnemonicDictionary(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GetMnemonicDictionary needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GetMnemonicDictionary();

        //Wrap result in node object
        auto arg_0 = Napi::Array::New(env);
        for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
        {
            auto arg_0_elem = Napi::String::New(env, result[arg_0_id]);
            arg_0.Set((int)arg_0_id,arg_0_elem);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::UnlockWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::UnlockWallet needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::UnlockWallet(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::LockWallet(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::LockWallet needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::LockWallet();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::ChangePassword(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::ChangePassword needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();
    std::string arg_1 = info[1].As<Napi::String>();

    try
    {
        auto result = ILibraryController::ChangePassword(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSILibraryController::DoRescan(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::DoRescan needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    try
    {
        ILibraryController::DoRescan();
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSILibraryController::IsValidRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsValidRecipient needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("scheme");
    if (field_arg_0_1.IsEmpty() || field_arg_0_1.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'scheme' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("path");
    if (field_arg_0_2.IsEmpty() || field_arg_0_2.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'path' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("items");
    if (field_arg_0_3.IsEmpty() || field_arg_0_3.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'items' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    unordered_map<std::string, std::string> arg_0_3;
    auto arg_0_3_prop_names = field_arg_0_3.ToObject().GetPropertyNames();
    for(uint32_t arg_0_3_id = 0; arg_0_3_id < arg_0_3_prop_names.Length(); arg_0_3_id++)
    {
        std::string arg_0_3_key = arg_0_3_prop_names.Get(arg_0_3_id).ToString();
        std::string arg_0_3_value = arg_0_3_prop_names.Get(arg_0_3_key).ToString();
        arg_0_3.emplace(arg_0_3_key,arg_0_3_value);
    }

    UriRecord arg_0(arg_0_1, arg_0_2, arg_0_3);


    try
    {
        auto result = ILibraryController::IsValidRecipient(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Object::New(env);
        auto arg_1_1 = Napi::Value::From(env, result.valid);
        arg_1.Set("valid", arg_1_1);
        auto arg_1_2 = Napi::String::New(env, result.address);
        arg_1.Set("address", arg_1_2);
        auto arg_1_3 = Napi::String::New(env, result.label);
        arg_1.Set("label", arg_1_3);
        auto arg_1_4 = Napi::String::New(env, result.desc);
        arg_1.Set("desc", arg_1_4);
        auto arg_1_5 = Napi::Value::From(env, result.amount);
        arg_1.Set("amount", arg_1_5);


        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsValidNativeAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsValidNativeAddress needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::IsValidNativeAddress(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::IsValidBitcoinAddress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::IsValidBitcoinAddress needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::IsValidBitcoinAddress(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::feeForRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::feeForRecipient needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("valid");
    if (field_arg_0_1.IsEmpty() || field_arg_0_1.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'valid' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    auto arg_0_1 = field_arg_0_1.ToBoolean().Value();

    auto field_arg_0_2 = info[0].ToObject().Get("address");
    if (field_arg_0_2.IsEmpty() || field_arg_0_2.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'address' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("label");
    if (field_arg_0_3.IsEmpty() || field_arg_0_3.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'label' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("desc");
    if (field_arg_0_4.IsEmpty() || field_arg_0_4.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'desc' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();

    auto field_arg_0_5 = info[0].ToObject().Get("amount");
    if (field_arg_0_5.IsEmpty() || field_arg_0_5.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'amount' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    auto arg_0_5 = field_arg_0_5.ToNumber().Int64Value();
    UriRecipient arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);


    try
    {
        auto result = ILibraryController::feeForRecipient(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Value::From(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::performPaymentToRecipient(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        Napi::Error::New(env, "NJSILibraryController::performPaymentToRecipient needs 2 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("valid");
    if (field_arg_0_1.IsEmpty() || field_arg_0_1.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'valid' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    auto arg_0_1 = field_arg_0_1.ToBoolean().Value();

    auto field_arg_0_2 = info[0].ToObject().Get("address");
    if (field_arg_0_2.IsEmpty() || field_arg_0_2.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'address' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("label");
    if (field_arg_0_3.IsEmpty() || field_arg_0_3.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'label' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("desc");
    if (field_arg_0_4.IsEmpty() || field_arg_0_4.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'desc' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();

    auto field_arg_0_5 = info[0].ToObject().Get("amount");
    if (field_arg_0_5.IsEmpty() || field_arg_0_5.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'amount' field").ThrowAsJavaScriptException();
        return Napi::Value();
    }
    auto arg_0_5 = field_arg_0_5.ToNumber().Int64Value();
    UriRecipient arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4, arg_0_5);

    auto arg_1 = info[1].ToBoolean().Value();

    try
    {
        auto result = ILibraryController::performPaymentToRecipient(arg_0,arg_1);

        //Wrap result in node object
        auto arg_2 = Napi::Value::From(env, (int)result);

        return arg_2;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getTransaction(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::getTransaction needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::getTransaction(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::Object::New(env);
        auto arg_1_1 = Napi::String::New(env, result.txHash);
        arg_1.Set("txHash", arg_1_1);
        auto arg_1_2 = Napi::Value::From(env, result.timeStamp);
        arg_1.Set("timeStamp", arg_1_2);
        auto arg_1_3 = Napi::Value::From(env, result.amount);
        arg_1.Set("amount", arg_1_3);
        auto arg_1_4 = Napi::Value::From(env, result.fee);
        arg_1.Set("fee", arg_1_4);
        auto arg_1_5 = Napi::Value::From(env, (int)result.status);
        arg_1.Set("status", arg_1_5);
        auto arg_1_6 = Napi::Value::From(env, result.height);
        arg_1.Set("height", arg_1_6);
        auto arg_1_7 = Napi::Value::From(env, result.blockTime);
        arg_1.Set("blockTime", arg_1_7);
        auto arg_1_8 = Napi::Value::From(env, result.depth);
        arg_1.Set("depth", arg_1_8);
        auto arg_1_9 = Napi::Array::New(env);
        for(size_t arg_1_9_id = 0; arg_1_9_id < result.inputs.size(); arg_1_9_id++)
        {
            auto arg_1_9_elem = Napi::Object::New(env);
            auto arg_1_9_elem_1 = Napi::String::New(env, result.inputs[arg_1_9_id].address);
            arg_1_9_elem.Set("address", arg_1_9_elem_1);
            auto arg_1_9_elem_2 = Napi::String::New(env, result.inputs[arg_1_9_id].label);
            arg_1_9_elem.Set("label", arg_1_9_elem_2);
            auto arg_1_9_elem_3 = Napi::String::New(env, result.inputs[arg_1_9_id].desc);
            arg_1_9_elem.Set("desc", arg_1_9_elem_3);
            auto arg_1_9_elem_4 = Napi::Value::From(env, result.inputs[arg_1_9_id].isMine);
            arg_1_9_elem.Set("isMine", arg_1_9_elem_4);

            arg_1_9.Set((int)arg_1_9_id,arg_1_9_elem);
        }

        arg_1.Set("inputs", arg_1_9);
        auto arg_1_10 = Napi::Array::New(env);
        for(size_t arg_1_10_id = 0; arg_1_10_id < result.outputs.size(); arg_1_10_id++)
        {
            auto arg_1_10_elem = Napi::Object::New(env);
            auto arg_1_10_elem_1 = Napi::Value::From(env, result.outputs[arg_1_10_id].amount);
            arg_1_10_elem.Set("amount", arg_1_10_elem_1);
            auto arg_1_10_elem_2 = Napi::String::New(env, result.outputs[arg_1_10_id].address);
            arg_1_10_elem.Set("address", arg_1_10_elem_2);
            auto arg_1_10_elem_3 = Napi::String::New(env, result.outputs[arg_1_10_id].label);
            arg_1_10_elem.Set("label", arg_1_10_elem_3);
            auto arg_1_10_elem_4 = Napi::String::New(env, result.outputs[arg_1_10_id].desc);
            arg_1_10_elem.Set("desc", arg_1_10_elem_4);
            auto arg_1_10_elem_5 = Napi::Value::From(env, result.outputs[arg_1_10_id].isMine);
            arg_1_10_elem.Set("isMine", arg_1_10_elem_5);

            arg_1_10.Set((int)arg_1_10_id,arg_1_10_elem);
        }

        arg_1.Set("outputs", arg_1_10);


        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::resendTransaction(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::resendTransaction needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::string arg_0 = info[0].As<Napi::String>();

    try
    {
        auto result = ILibraryController::resendTransaction(arg_0);

        //Wrap result in node object
        auto arg_1 = Napi::String::New(env, result);

        return arg_1;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getAddressBookRecords(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getAddressBookRecords needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getAddressBookRecords();

        //Wrap result in node object
        auto arg_0 = Napi::Array::New(env);
        for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
        {
            auto arg_0_elem = Napi::Object::New(env);
            auto arg_0_elem_1 = Napi::String::New(env, result[arg_0_id].address);
            arg_0_elem.Set("address", arg_0_elem_1);
            auto arg_0_elem_2 = Napi::String::New(env, result[arg_0_id].name);
            arg_0_elem.Set("name", arg_0_elem_2);
            auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].desc);
            arg_0_elem.Set("desc", arg_0_elem_3);
            auto arg_0_elem_4 = Napi::String::New(env, result[arg_0_id].purpose);
            arg_0_elem.Set("purpose", arg_0_elem_4);

            arg_0.Set((int)arg_0_id,arg_0_elem);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSILibraryController::addAddressBookRecord(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::addAddressBookRecord needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("address");
    if (field_arg_0_1.IsEmpty() || field_arg_0_1.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'address' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("name");
    if (field_arg_0_2.IsEmpty() || field_arg_0_2.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'name' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("desc");
    if (field_arg_0_3.IsEmpty() || field_arg_0_3.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'desc' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("purpose");
    if (field_arg_0_4.IsEmpty() || field_arg_0_4.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'purpose' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();
    AddressRecord arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);

    try
    {
        ILibraryController::addAddressBookRecord(arg_0);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
void NJSILibraryController::deleteAddressBookRecord(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::deleteAddressBookRecord needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = info[0].ToObject().Get("address");
    if (field_arg_0_1.IsEmpty() || field_arg_0_1.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'address' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_1 = field_arg_0_1.As<Napi::String>();

    auto field_arg_0_2 = info[0].ToObject().Get("name");
    if (field_arg_0_2.IsEmpty() || field_arg_0_2.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'name' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_2 = field_arg_0_2.As<Napi::String>();

    auto field_arg_0_3 = info[0].ToObject().Get("desc");
    if (field_arg_0_3.IsEmpty() || field_arg_0_3.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'desc' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_3 = field_arg_0_3.As<Napi::String>();

    auto field_arg_0_4 = info[0].ToObject().Get("purpose");
    if (field_arg_0_4.IsEmpty() || field_arg_0_4.IsUndefined())
    {
        Napi::Error::New(env, "Object is missing 'purpose' field").ThrowAsJavaScriptException();
        return;
    }
    std::string arg_0_4 = field_arg_0_4.As<Napi::String>();
    AddressRecord arg_0(arg_0_1, arg_0_2, arg_0_3, arg_0_4);

    try
    {
        ILibraryController::deleteAddressBookRecord(arg_0);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
void NJSILibraryController::PersistAndPruneForSPV(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::PersistAndPruneForSPV needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    try
    {
        ILibraryController::PersistAndPruneForSPV();
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
void NJSILibraryController::ResetUnifiedProgress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::ResetUnifiedProgress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    try
    {
        ILibraryController::ResetUnifiedProgress();
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSILibraryController::getLastSPVBlockInfos(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getLastSPVBlockInfos needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getLastSPVBlockInfos();

        //Wrap result in node object
        auto arg_0 = Napi::Array::New(env);
        for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
        {
            auto arg_0_elem = Napi::Object::New(env);
            auto arg_0_elem_1 = Napi::Value::From(env, result[arg_0_id].height);
            arg_0_elem.Set("height", arg_0_elem_1);
            auto arg_0_elem_2 = Napi::Value::From(env, result[arg_0_id].timeStamp);
            arg_0_elem.Set("timeStamp", arg_0_elem_2);
            auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].blockHash);
            arg_0_elem.Set("blockHash", arg_0_elem_3);

            arg_0.Set((int)arg_0_id,arg_0_elem);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getUnifiedProgress(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getUnifiedProgress needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getUnifiedProgress();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getMonitoringStats(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getMonitoringStats needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getMonitoringStats();

        //Wrap result in node object
        auto arg_0 = Napi::Object::New(env);
        auto arg_0_1 = Napi::Value::From(env, result.partialHeight);
        arg_0.Set("partialHeight", arg_0_1);
        auto arg_0_2 = Napi::Value::From(env, result.partialOffset);
        arg_0.Set("partialOffset", arg_0_2);
        auto arg_0_3 = Napi::Value::From(env, result.prunedHeight);
        arg_0.Set("prunedHeight", arg_0_3);
        auto arg_0_4 = Napi::Value::From(env, result.processedSPVHeight);
        arg_0.Set("processedSPVHeight", arg_0_4);
        auto arg_0_5 = Napi::Value::From(env, result.probableHeight);
        arg_0.Set("probableHeight", arg_0_5);


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
void NJSILibraryController::RegisterMonitorListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::RegisterMonitorListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<NJSMonitorListener> arg_0(std::shared_ptr<NJSMonitorListener>{}, NJSMonitorListener::Unwrap(info[0].As<Napi::Object>()));

    try
    {
        ILibraryController::RegisterMonitorListener(arg_0);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
void NJSILibraryController::UnregisterMonitorListener(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        Napi::Error::New(env, "NJSILibraryController::UnregisterMonitorListener needs 1 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types
    std::shared_ptr<NJSMonitorListener> arg_0(std::shared_ptr<NJSMonitorListener>{}, NJSMonitorListener::Unwrap(info[0].As<Napi::Object>()));

    try
    {
        ILibraryController::UnregisterMonitorListener(arg_0);
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return;
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return;
    }
}
Napi::Value NJSILibraryController::getClientInfo(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getClientInfo needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getClientInfo();

        //Wrap result in node object
        auto arg_0 = Napi::Object::New(env);
        for(auto const& arg_0_elem : result)
        {
            auto arg_0_first = Napi::String::New(env, arg_0_elem.first);
            auto arg_0_second = Napi::String::New(env, arg_0_elem.second);
            arg_0.Set(arg_0_first, arg_0_second);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getMutationHistory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getMutationHistory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getMutationHistory();

        //Wrap result in node object
        auto arg_0 = Napi::Array::New(env);
        for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
        {
            auto arg_0_elem = Napi::Object::New(env);
            auto arg_0_elem_1 = Napi::Value::From(env, result[arg_0_id].change);
            arg_0_elem.Set("change", arg_0_elem_1);
            auto arg_0_elem_2 = Napi::Value::From(env, result[arg_0_id].timestamp);
            arg_0_elem.Set("timestamp", arg_0_elem_2);
            auto arg_0_elem_3 = Napi::String::New(env, result[arg_0_id].txHash);
            arg_0_elem.Set("txHash", arg_0_elem_3);
            auto arg_0_elem_4 = Napi::String::New(env, result[arg_0_id].recipient_addresses);
            arg_0_elem.Set("recipient_addresses", arg_0_elem_4);
            auto arg_0_elem_5 = Napi::Value::From(env, (int)result[arg_0_id].status);
            arg_0_elem.Set("status", arg_0_elem_5);
            auto arg_0_elem_6 = Napi::Value::From(env, result[arg_0_id].depth);
            arg_0_elem.Set("depth", arg_0_elem_6);

            arg_0.Set((int)arg_0_id,arg_0_elem);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::getTransactionHistory(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::getTransactionHistory needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::getTransactionHistory();

        //Wrap result in node object
        auto arg_0 = Napi::Array::New(env);
        for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
        {
            auto arg_0_elem = Napi::Object::New(env);
            auto arg_0_elem_1 = Napi::String::New(env, result[arg_0_id].txHash);
            arg_0_elem.Set("txHash", arg_0_elem_1);
            auto arg_0_elem_2 = Napi::Value::From(env, result[arg_0_id].timeStamp);
            arg_0_elem.Set("timeStamp", arg_0_elem_2);
            auto arg_0_elem_3 = Napi::Value::From(env, result[arg_0_id].amount);
            arg_0_elem.Set("amount", arg_0_elem_3);
            auto arg_0_elem_4 = Napi::Value::From(env, result[arg_0_id].fee);
            arg_0_elem.Set("fee", arg_0_elem_4);
            auto arg_0_elem_5 = Napi::Value::From(env, (int)result[arg_0_id].status);
            arg_0_elem.Set("status", arg_0_elem_5);
            auto arg_0_elem_6 = Napi::Value::From(env, result[arg_0_id].height);
            arg_0_elem.Set("height", arg_0_elem_6);
            auto arg_0_elem_7 = Napi::Value::From(env, result[arg_0_id].blockTime);
            arg_0_elem.Set("blockTime", arg_0_elem_7);
            auto arg_0_elem_8 = Napi::Value::From(env, result[arg_0_id].depth);
            arg_0_elem.Set("depth", arg_0_elem_8);
            auto arg_0_elem_9 = Napi::Array::New(env);
            for(size_t arg_0_elem_9_id = 0; arg_0_elem_9_id < result[arg_0_id].inputs.size(); arg_0_elem_9_id++)
            {
                auto arg_0_elem_9_elem = Napi::Object::New(env);
                auto arg_0_elem_9_elem_1 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].address);
                arg_0_elem_9_elem.Set("address", arg_0_elem_9_elem_1);
                auto arg_0_elem_9_elem_2 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].label);
                arg_0_elem_9_elem.Set("label", arg_0_elem_9_elem_2);
                auto arg_0_elem_9_elem_3 = Napi::String::New(env, result[arg_0_id].inputs[arg_0_elem_9_id].desc);
                arg_0_elem_9_elem.Set("desc", arg_0_elem_9_elem_3);
                auto arg_0_elem_9_elem_4 = Napi::Value::From(env, result[arg_0_id].inputs[arg_0_elem_9_id].isMine);
                arg_0_elem_9_elem.Set("isMine", arg_0_elem_9_elem_4);

                arg_0_elem_9.Set((int)arg_0_elem_9_id,arg_0_elem_9_elem);
            }

            arg_0_elem.Set("inputs", arg_0_elem_9);
            auto arg_0_elem_10 = Napi::Array::New(env);
            for(size_t arg_0_elem_10_id = 0; arg_0_elem_10_id < result[arg_0_id].outputs.size(); arg_0_elem_10_id++)
            {
                auto arg_0_elem_10_elem = Napi::Object::New(env);
                auto arg_0_elem_10_elem_1 = Napi::Value::From(env, result[arg_0_id].outputs[arg_0_elem_10_id].amount);
                arg_0_elem_10_elem.Set("amount", arg_0_elem_10_elem_1);
                auto arg_0_elem_10_elem_2 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].address);
                arg_0_elem_10_elem.Set("address", arg_0_elem_10_elem_2);
                auto arg_0_elem_10_elem_3 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].label);
                arg_0_elem_10_elem.Set("label", arg_0_elem_10_elem_3);
                auto arg_0_elem_10_elem_4 = Napi::String::New(env, result[arg_0_id].outputs[arg_0_elem_10_id].desc);
                arg_0_elem_10_elem.Set("desc", arg_0_elem_10_elem_4);
                auto arg_0_elem_10_elem_5 = Napi::Value::From(env, result[arg_0_id].outputs[arg_0_elem_10_id].isMine);
                arg_0_elem_10_elem.Set("isMine", arg_0_elem_10_elem_5);

                arg_0_elem_10.Set((int)arg_0_elem_10_id,arg_0_elem_10_elem);
            }

            arg_0_elem.Set("outputs", arg_0_elem_10);

            arg_0.Set((int)arg_0_id,arg_0_elem);
        }


        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::HaveUnconfirmedFunds(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::HaveUnconfirmedFunds needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::HaveUnconfirmedFunds();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}
Napi::Value NJSILibraryController::GetBalance(const Napi::CallbackInfo& info) {
    Napi::Env env = info.Env();


    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        Napi::Error::New(env, "NJSILibraryController::GetBalance needs 0 arguments").ThrowAsJavaScriptException();
    }

    //Check if parameters have correct types

    try
    {
        auto result = ILibraryController::GetBalance();

        //Wrap result in node object
        auto arg_0 = Napi::Value::From(env, result);

        return arg_0;
    }
    catch (std::exception& e)
    {
        Napi::Error::New(env, e.what()).ThrowAsJavaScriptException();
        return Napi::Value();
    }
    catch (...)
    {
        Napi::Error::New(env, "core exception thrown").ThrowAsJavaScriptException();
        return Napi::Value();
    }
}

Napi::FunctionReference NJSILibraryController::constructor;

Napi::Object NJSILibraryController::Init(Napi::Env env, Napi::Object exports) {

    // Hook all method callbacks
    Napi::Function func = DefineClass(env, "NJSILibraryController", {
    InstanceMethod("BuildInfo", &NJSILibraryController::BuildInfo),
    InstanceMethod("InitUnityLib", &NJSILibraryController::InitUnityLib),
    InstanceMethod("InitUnityLibThreaded", &NJSILibraryController::InitUnityLibThreaded),
    InstanceMethod("InitWalletFromRecoveryPhrase", &NJSILibraryController::InitWalletFromRecoveryPhrase),
    InstanceMethod("ContinueWalletFromRecoveryPhrase", &NJSILibraryController::ContinueWalletFromRecoveryPhrase),
    InstanceMethod("InitWalletLinkedFromURI", &NJSILibraryController::InitWalletLinkedFromURI),
    InstanceMethod("ContinueWalletLinkedFromURI", &NJSILibraryController::ContinueWalletLinkedFromURI),
    InstanceMethod("InitWalletFromAndroidLegacyProtoWallet", &NJSILibraryController::InitWalletFromAndroidLegacyProtoWallet),
    InstanceMethod("isValidAndroidLegacyProtoWallet", &NJSILibraryController::isValidAndroidLegacyProtoWallet),
    InstanceMethod("IsValidLinkURI", &NJSILibraryController::IsValidLinkURI),
    InstanceMethod("ReplaceWalletLinkedFromURI", &NJSILibraryController::ReplaceWalletLinkedFromURI),
    InstanceMethod("EraseWalletSeedsAndAccounts", &NJSILibraryController::EraseWalletSeedsAndAccounts),
    InstanceMethod("IsValidRecoveryPhrase", &NJSILibraryController::IsValidRecoveryPhrase),
    InstanceMethod("GenerateRecoveryMnemonic", &NJSILibraryController::GenerateRecoveryMnemonic),
    InstanceMethod("GenerateGenesisKeys", &NJSILibraryController::GenerateGenesisKeys),
    InstanceMethod("ComposeRecoveryPhrase", &NJSILibraryController::ComposeRecoveryPhrase),
    InstanceMethod("TerminateUnityLib", &NJSILibraryController::TerminateUnityLib),
    InstanceMethod("QRImageFromString", &NJSILibraryController::QRImageFromString),
    InstanceMethod("GetReceiveAddress", &NJSILibraryController::GetReceiveAddress),
    InstanceMethod("GetRecoveryPhrase", &NJSILibraryController::GetRecoveryPhrase),
    InstanceMethod("IsMnemonicWallet", &NJSILibraryController::IsMnemonicWallet),
    InstanceMethod("IsMnemonicCorrect", &NJSILibraryController::IsMnemonicCorrect),
    InstanceMethod("GetMnemonicDictionary", &NJSILibraryController::GetMnemonicDictionary),
    InstanceMethod("UnlockWallet", &NJSILibraryController::UnlockWallet),
    InstanceMethod("LockWallet", &NJSILibraryController::LockWallet),
    InstanceMethod("ChangePassword", &NJSILibraryController::ChangePassword),
    InstanceMethod("DoRescan", &NJSILibraryController::DoRescan),
    InstanceMethod("IsValidRecipient", &NJSILibraryController::IsValidRecipient),
    InstanceMethod("IsValidNativeAddress", &NJSILibraryController::IsValidNativeAddress),
    InstanceMethod("IsValidBitcoinAddress", &NJSILibraryController::IsValidBitcoinAddress),
    InstanceMethod("feeForRecipient", &NJSILibraryController::feeForRecipient),
    InstanceMethod("performPaymentToRecipient", &NJSILibraryController::performPaymentToRecipient),
    InstanceMethod("getTransaction", &NJSILibraryController::getTransaction),
    InstanceMethod("resendTransaction", &NJSILibraryController::resendTransaction),
    InstanceMethod("getAddressBookRecords", &NJSILibraryController::getAddressBookRecords),
    InstanceMethod("addAddressBookRecord", &NJSILibraryController::addAddressBookRecord),
    InstanceMethod("deleteAddressBookRecord", &NJSILibraryController::deleteAddressBookRecord),
    InstanceMethod("PersistAndPruneForSPV", &NJSILibraryController::PersistAndPruneForSPV),
    InstanceMethod("ResetUnifiedProgress", &NJSILibraryController::ResetUnifiedProgress),
    InstanceMethod("getLastSPVBlockInfos", &NJSILibraryController::getLastSPVBlockInfos),
    InstanceMethod("getUnifiedProgress", &NJSILibraryController::getUnifiedProgress),
    InstanceMethod("getMonitoringStats", &NJSILibraryController::getMonitoringStats),
    InstanceMethod("RegisterMonitorListener", &NJSILibraryController::RegisterMonitorListener),
    InstanceMethod("UnregisterMonitorListener", &NJSILibraryController::UnregisterMonitorListener),
    InstanceMethod("getClientInfo", &NJSILibraryController::getClientInfo),
    InstanceMethod("getMutationHistory", &NJSILibraryController::getMutationHistory),
    InstanceMethod("getTransactionHistory", &NJSILibraryController::getTransactionHistory),
    InstanceMethod("HaveUnconfirmedFunds", &NJSILibraryController::HaveUnconfirmedFunds),
    InstanceMethod("GetBalance", &NJSILibraryController::GetBalance),
    });
    // Create a peristent reference to the class constructor. This will allow a function called on a class prototype and a function called on instance of a class to be distinguished from each other.
    constructor = Napi::Persistent(func);
    // Call the SuppressDestruct() method on the static data prevent the calling to this destructor to reset the reference when the environment is no longer available.
    constructor.SuppressDestruct();
    exports.Set("NJSILibraryController", func);
    return exports;
}
