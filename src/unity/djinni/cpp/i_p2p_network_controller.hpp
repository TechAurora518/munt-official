// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#ifdef DJINNI_NODEJS
#include "NJSIP2pNetworkListener.hpp"
#else
class IP2pNetworkListener;
#endif
struct BannedPeerRecord;
struct PeerRecord;

/** C++ interface to control networking related aspects of the software */
class IP2pNetworkController {
public:
    virtual ~IP2pNetworkController() {}

    /** Register listener to be notified of networking events */
    static void setListener(const std::shared_ptr<IP2pNetworkListener> & networklistener);

    /** Turn p2p networking off */
    static void disableNetwork();

    /** Turn p2p networking on */
    static void enableNetwork();

    /** Get connected peer info */
    static std::vector<PeerRecord> getPeerInfo();

    /** Get all banned peers */
    static std::vector<BannedPeerRecord> listBannedPeers();

    static bool banPeer(const std::string & address, int64_t banTimeInSeconds);

    /** Unban a single peer */
    static bool unbanPeer(const std::string & address);

    /** Disconnect a specific peer */
    static bool disconnectPeer(int64_t nodeid);

    /** Clear all banned peers */
    static bool ClearBanned();
};
