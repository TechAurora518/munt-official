// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libunity.djinni

#pragma once

#include <string>

struct BalanceRecord;
struct MutationRecord;
struct TransactionRecord;

/** Interface to receive wallet level events */
#ifdef DJINNI_NODEJS
#include "NJSIWalletListener.hpp" 
#define IWalletListener NJSIWalletListener
#else

class IWalletListener {
public:
    virtual ~IWalletListener() {}

    /** Notification of change in overall wallet balance */
    virtual void notifyBalanceChange(const BalanceRecord & new_balance) = 0;

    /**
     * Notification of new mutations.
     * If self_committed it is due to a call to performPaymentToRecipient, else it is because of a transaction
     * reached us in another way. In general this will be because we received funds from someone, hower there are
     * also cases where funds is send from our wallet while !self_committed (for example by a linked desktop wallet
     * or another wallet instance using the same keys as ours).
     *
     * Note that no notifyNewMutation events will fire until after 'notifySyncDone'
     * Therefore it is necessary to first fetch the full mutation history before starting to listen for this event.
     */
    virtual void notifyNewMutation(const MutationRecord & mutation, bool self_committed) = 0;

    /**
     * Notification that an existing transaction/mutation  has updated
     *
     * Note that no notifyUpdatedTransaction events will fire until after 'notifySyncDone'
     * Therefore it is necessary to first fetch the full mutation history before starting to listen for this event.
     */
    virtual void notifyUpdatedTransaction(const TransactionRecord & transaction) = 0;

    /** Wallet unlocked */
    virtual void notifyWalletUnlocked() = 0;

    /** Wallet locked */
    virtual void notifyWalletLocked() = 0;

    /** Core wants the wallet to unlock; UI should respond to this by calling 'UnlockWallet' */
    virtual void notifyCoreWantsUnlock(const std::string & reason) = 0;

    /** Core wants display info to the user, type can be one of "MSG_ERROR", "MSG_WARNING", "MSG_INFORMATION"; caption is the suggested caption and message the suggested message to display */
    virtual void notifyCoreInfo(const std::string & type, const std::string & caption, const std::string & message) = 0;
};
#endif
